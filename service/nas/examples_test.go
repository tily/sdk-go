// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package nas_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/tily/sdk-go/aws"
	"github.com/tily/sdk-go/aws/session"
	"github.com/tily/sdk-go/service/nas"
)

var _ time.Duration
var _ bytes.Buffer

func Examplenas_AuthorizeNASSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.AuthorizeNASSecurityGroupIngressInput{
		NASSecurityGroupName: aws.String("String"), // Required
		CIDRIP:               aws.String("String"),
		SecurityGroupName:    aws.String("String"),
	}
	resp, err := svc.AuthorizeNASSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_CreateNASInstance() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.CreateNASInstanceInput{
		AllocatedStorage:       aws.Int64(1),         // Required
		NASInstanceIdentifier:  aws.String("String"), // Required
		Protocol:               aws.String("String"), // Required
		AvailabilityZone:       aws.String("String"),
		MasterPrivateAddress:   aws.String("String"),
		MasterUserPassword:     aws.String("String"),
		MasterUsername:         aws.String("String"),
		NASInstanceDescription: aws.String("String"),
		NASInstanceType:        aws.Int64(1),
		NASSecurityGroups: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NetworkId: aws.String("String"),
	}
	resp, err := svc.CreateNASInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_CreateNASSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.CreateNASSecurityGroupInput{
		AvailabilityZone:            aws.String("String"), // Required
		NASSecurityGroupName:        aws.String("String"), // Required
		NASSecurityGroupDescription: aws.String("String"),
	}
	resp, err := svc.CreateNASSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_DeleteNASInstance() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.DeleteNASInstanceInput{
		NASInstanceIdentifier:                 aws.String("String"), // Required
		DirectoryServiceAdministratorName:     aws.String("String"),
		DirectoryServiceAdministratorPassword: aws.String("String"),
	}
	resp, err := svc.DeleteNASInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_DeleteNASSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.DeleteNASSecurityGroupInput{
		NASSecurityGroupName: aws.String("String"), // Required
	}
	resp, err := svc.DeleteNASSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_DescribeNASInstances() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.DescribeNASInstancesInput{
		NASInstanceIdentifier: aws.String("String"),
	}
	resp, err := svc.DescribeNASInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_DescribeNASSecurityGroups() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.DescribeNASSecurityGroupsInput{
		NASSecurityGroupName: aws.String("String"), // Required
	}
	resp, err := svc.DescribeNASSecurityGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_GetMetricStatistics() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.GetMetricStatisticsInput{
		Dimensions: []*nas.DimensionsStruct{ // Required
			{ // Required
				Name:  aws.String("String"),
				Value: aws.String("String"),
			},
			// More values...
		},
		Dimensions: []*nas.DimensionsStruct{ // Required
			{ // Required
				Name:  aws.String("String"),
				Value: aws.String("String"),
			},
			// More values...
		},
		MetricName: aws.String("String"), // Required
		EndTime:    aws.Time(time.Now()),
		StartTime:  aws.Time(time.Now()),
	}
	resp, err := svc.GetMetricStatistics(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_ModifyNASInstance() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.ModifyNASInstanceInput{
		NASInstanceIdentifier:                 aws.String("String"), // Required
		NetworkId:                             aws.String("String"), // Required
		AllocatedStorage:                      aws.Int64(1),
		AuthenticationType:                    aws.Int64(1),
		DirectoryServiceAdministratorName:     aws.String("String"),
		DirectoryServiceAdministratorPassword: aws.String("String"),
		DirectoryServiceDomainName:            aws.String("String"),
		DomainControllers: []*nas.DomainControllersStruct{
			{ // Required
				Hostname:  aws.String("String"),
				IPAddress: aws.String("String"),
			},
			// More values...
		},
		MasterPrivateAddress:   aws.String("String"),
		MasterUserPassword:     aws.String("String"),
		NASInstanceDescription: aws.String("String"),
		NASSecurityGroups: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NewNASInstanceIdentifier: aws.String("String"),
	}
	resp, err := svc.ModifyNASInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_ModifyNASSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.ModifyNASSecurityGroupInput{
		NASSecurityGroupName:        aws.String("String"), // Required
		NASSecurityGroupDescription: aws.String("String"),
		NewNASSecurityGroupName:     aws.String("String"),
	}
	resp, err := svc.ModifyNASSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplenas_RevokeNASSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := nas.New(sess)

	params := &nas.RevokeNASSecurityGroupIngressInput{
		NASSecurityGroupName: aws.String("String"), // Required
		CIDRIP:               aws.String("String"),
		SecurityGroupName:    aws.String("String"),
	}
	resp, err := svc.RevokeNASSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
