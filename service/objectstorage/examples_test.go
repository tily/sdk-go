// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package objectstorage_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/tily/sdk-go/aws"
	"github.com/tily/sdk-go/aws/session"
	"github.com/tily/sdk-go/service/objectstorage"
)

var _ time.Duration
var _ bytes.Buffer

func Exampleobjectstorage_AbortMultipartUpload() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.AbortMultipartUploadInput{
		Bucket:       aws.String("BucketName"),        // Required
		Key:          aws.String("ObjectKey"),         // Required
		UploadId:     aws.String("MultipartUploadId"), // Required
		RequestPayer: aws.String("RequestPayer"),
	}
	resp, err := svc.AbortMultipartUpload(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_CompleteMultipartUpload() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.CompleteMultipartUploadInput{
		Bucket:   aws.String("BucketName"),        // Required
		Key:      aws.String("ObjectKey"),         // Required
		UploadId: aws.String("MultipartUploadId"), // Required
		MultipartUpload: &objectstorage.CompletedMultipartUpload{
			Parts: []*objectstorage.CompletedPart{
				{ // Required
					ETag:       aws.String("ETag"),
					PartNumber: aws.Int64(1),
				},
				// More values...
			},
		},
		RequestPayer: aws.String("RequestPayer"),
	}
	resp, err := svc.CompleteMultipartUpload(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_CopyObject() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.CopyObjectInput{
		Bucket:                         aws.String("BucketName"), // Required
		CopySource:                     aws.String("CopySource"), // Required
		Key:                            aws.String("ObjectKey"),  // Required
		ACL:                            aws.String("ObjectCannedACL"),
		CacheControl:                   aws.String("CacheControl"),
		ContentDisposition:             aws.String("ContentDisposition"),
		ContentEncoding:                aws.String("ContentEncoding"),
		ContentLanguage:                aws.String("ContentLanguage"),
		ContentType:                    aws.String("ContentType"),
		CopySourceIfMatch:              aws.String("CopySourceIfMatch"),
		CopySourceIfModifiedSince:      aws.Time(time.Now()),
		CopySourceIfNoneMatch:          aws.String("CopySourceIfNoneMatch"),
		CopySourceIfUnmodifiedSince:    aws.Time(time.Now()),
		CopySourceSSECustomerAlgorithm: aws.String("CopySourceSSECustomerAlgorithm"),
		CopySourceSSECustomerKey:       aws.String("CopySourceSSECustomerKey"),
		CopySourceSSECustomerKeyMD5:    aws.String("CopySourceSSECustomerKeyMD5"),
		Expires:                        aws.Time(time.Now()),
		GrantFullControl:               aws.String("GrantFullControl"),
		GrantRead:                      aws.String("GrantRead"),
		GrantReadACP:                   aws.String("GrantReadACP"),
		GrantWriteACP:                  aws.String("GrantWriteACP"),
		Metadata: map[string]*string{
			"Key": aws.String("MetadataValue"), // Required
			// More values...
		},
		MetadataDirective:       aws.String("MetadataDirective"),
		RequestPayer:            aws.String("RequestPayer"),
		SSECustomerAlgorithm:    aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:          aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:       aws.String("SSECustomerKeyMD5"),
		SSEKMSKeyId:             aws.String("SSEKMSKeyId"),
		ServerSideEncryption:    aws.String("ServerSideEncryption"),
		StorageClass:            aws.String("StorageClass"),
		Tagging:                 aws.String("TaggingHeader"),
		TaggingDirective:        aws.String("TaggingDirective"),
		WebsiteRedirectLocation: aws.String("WebsiteRedirectLocation"),
	}
	resp, err := svc.CopyObject(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_CreateBucket() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.CreateBucketInput{
		Bucket: aws.String("BucketName"), // Required
		ACL:    aws.String("BucketCannedACL"),
		CreateBucketConfiguration: &objectstorage.CreateBucketConfiguration{
			LocationConstraint: aws.String("BucketLocationConstraint"),
		},
		GrantFullControl: aws.String("GrantFullControl"),
		GrantRead:        aws.String("GrantRead"),
		GrantReadACP:     aws.String("GrantReadACP"),
		GrantWrite:       aws.String("GrantWrite"),
		GrantWriteACP:    aws.String("GrantWriteACP"),
	}
	resp, err := svc.CreateBucket(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_CreateMultipartUpload() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.CreateMultipartUploadInput{
		Bucket:             aws.String("BucketName"), // Required
		Key:                aws.String("ObjectKey"),  // Required
		ACL:                aws.String("ObjectCannedACL"),
		CacheControl:       aws.String("CacheControl"),
		ContentDisposition: aws.String("ContentDisposition"),
		ContentEncoding:    aws.String("ContentEncoding"),
		ContentLanguage:    aws.String("ContentLanguage"),
		ContentType:        aws.String("ContentType"),
		Expires:            aws.Time(time.Now()),
		GrantFullControl:   aws.String("GrantFullControl"),
		GrantRead:          aws.String("GrantRead"),
		GrantReadACP:       aws.String("GrantReadACP"),
		GrantWriteACP:      aws.String("GrantWriteACP"),
		Metadata: map[string]*string{
			"Key": aws.String("MetadataValue"), // Required
			// More values...
		},
		RequestPayer:            aws.String("RequestPayer"),
		SSECustomerAlgorithm:    aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:          aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:       aws.String("SSECustomerKeyMD5"),
		SSEKMSKeyId:             aws.String("SSEKMSKeyId"),
		ServerSideEncryption:    aws.String("ServerSideEncryption"),
		StorageClass:            aws.String("StorageClass"),
		WebsiteRedirectLocation: aws.String("WebsiteRedirectLocation"),
	}
	resp, err := svc.CreateMultipartUpload(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucket() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucket(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketAnalyticsConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketAnalyticsConfigurationInput{
		Bucket: aws.String("BucketName"),  // Required
		Id:     aws.String("AnalyticsId"), // Required
	}
	resp, err := svc.DeleteBucketAnalyticsConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketCors() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketCorsInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketCors(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketInventoryConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketInventoryConfigurationInput{
		Bucket: aws.String("BucketName"),  // Required
		Id:     aws.String("InventoryId"), // Required
	}
	resp, err := svc.DeleteBucketInventoryConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketLifecycle() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketLifecycleInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketLifecycle(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketMetricsConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketMetricsConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
		Id:     aws.String("MetricsId"),  // Required
	}
	resp, err := svc.DeleteBucketMetricsConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketPolicy() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketPolicyInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketPolicy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketReplication() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketReplicationInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketReplication(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketTagging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketTaggingInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketTagging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteBucketWebsite() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteBucketWebsiteInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketWebsite(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteObject() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteObjectInput{
		Bucket:       aws.String("BucketName"), // Required
		Key:          aws.String("ObjectKey"),  // Required
		MFA:          aws.String("MFA"),
		RequestPayer: aws.String("RequestPayer"),
		VersionId:    aws.String("ObjectVersionId"),
	}
	resp, err := svc.DeleteObject(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteObjectTagging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteObjectTaggingInput{
		Bucket:    aws.String("BucketName"), // Required
		Key:       aws.String("ObjectKey"),  // Required
		VersionId: aws.String("ObjectVersionId"),
	}
	resp, err := svc.DeleteObjectTagging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_DeleteObjects() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.DeleteObjectsInput{
		Bucket: aws.String("BucketName"), // Required
		Delete: &objectstorage.Delete{ // Required
			Objects: []*objectstorage.ObjectIdentifier{ // Required
				{ // Required
					Key:       aws.String("ObjectKey"), // Required
					VersionId: aws.String("ObjectVersionId"),
				},
				// More values...
			},
			Quiet: aws.Bool(true),
		},
		MFA:          aws.String("MFA"),
		RequestPayer: aws.String("RequestPayer"),
	}
	resp, err := svc.DeleteObjects(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketAccelerateConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketAccelerateConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketAccelerateConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketAcl() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketAclInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketAcl(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketAnalyticsConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketAnalyticsConfigurationInput{
		Bucket: aws.String("BucketName"),  // Required
		Id:     aws.String("AnalyticsId"), // Required
	}
	resp, err := svc.GetBucketAnalyticsConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketCors() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketCorsInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketCors(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketInventoryConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketInventoryConfigurationInput{
		Bucket: aws.String("BucketName"),  // Required
		Id:     aws.String("InventoryId"), // Required
	}
	resp, err := svc.GetBucketInventoryConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketLifecycle() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketLifecycleInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLifecycle(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketLifecycleConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketLifecycleConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLifecycleConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketLocation() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketLocationInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLocation(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketLogging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketLoggingInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLogging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketMetricsConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketMetricsConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
		Id:     aws.String("MetricsId"),  // Required
	}
	resp, err := svc.GetBucketMetricsConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketNotification() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketNotificationConfigurationRequest{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketNotification(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketNotificationConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketNotificationConfigurationRequest{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketNotificationConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketPolicy() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketPolicyInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketPolicy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketReplication() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketReplicationInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketReplication(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketRequestPayment() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketRequestPaymentInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketRequestPayment(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketTagging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketTaggingInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketTagging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketVersioning() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketVersioningInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketVersioning(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetBucketWebsite() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetBucketWebsiteInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketWebsite(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetObject() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetObjectInput{
		Bucket:                     aws.String("BucketName"), // Required
		Key:                        aws.String("ObjectKey"),  // Required
		IfMatch:                    aws.String("IfMatch"),
		IfModifiedSince:            aws.Time(time.Now()),
		IfNoneMatch:                aws.String("IfNoneMatch"),
		IfUnmodifiedSince:          aws.Time(time.Now()),
		PartNumber:                 aws.Int64(1),
		Range:                      aws.String("Range"),
		RequestPayer:               aws.String("RequestPayer"),
		ResponseCacheControl:       aws.String("ResponseCacheControl"),
		ResponseContentDisposition: aws.String("ResponseContentDisposition"),
		ResponseContentEncoding:    aws.String("ResponseContentEncoding"),
		ResponseContentLanguage:    aws.String("ResponseContentLanguage"),
		ResponseContentType:        aws.String("ResponseContentType"),
		ResponseExpires:            aws.Time(time.Now()),
		SSECustomerAlgorithm:       aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:             aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:          aws.String("SSECustomerKeyMD5"),
		VersionId:                  aws.String("ObjectVersionId"),
	}
	resp, err := svc.GetObject(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetObjectAcl() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetObjectAclInput{
		Bucket:       aws.String("BucketName"), // Required
		Key:          aws.String("ObjectKey"),  // Required
		RequestPayer: aws.String("RequestPayer"),
		VersionId:    aws.String("ObjectVersionId"),
	}
	resp, err := svc.GetObjectAcl(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetObjectTagging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetObjectTaggingInput{
		Bucket:    aws.String("BucketName"), // Required
		Key:       aws.String("ObjectKey"),  // Required
		VersionId: aws.String("ObjectVersionId"),
	}
	resp, err := svc.GetObjectTagging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_GetObjectTorrent() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.GetObjectTorrentInput{
		Bucket:       aws.String("BucketName"), // Required
		Key:          aws.String("ObjectKey"),  // Required
		RequestPayer: aws.String("RequestPayer"),
	}
	resp, err := svc.GetObjectTorrent(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_HeadBucket() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.HeadBucketInput{
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.HeadBucket(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_HeadObject() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.HeadObjectInput{
		Bucket:               aws.String("BucketName"), // Required
		Key:                  aws.String("ObjectKey"),  // Required
		IfMatch:              aws.String("IfMatch"),
		IfModifiedSince:      aws.Time(time.Now()),
		IfNoneMatch:          aws.String("IfNoneMatch"),
		IfUnmodifiedSince:    aws.Time(time.Now()),
		PartNumber:           aws.Int64(1),
		Range:                aws.String("Range"),
		RequestPayer:         aws.String("RequestPayer"),
		SSECustomerAlgorithm: aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:       aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:    aws.String("SSECustomerKeyMD5"),
		VersionId:            aws.String("ObjectVersionId"),
	}
	resp, err := svc.HeadObject(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListBucketAnalyticsConfigurations() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListBucketAnalyticsConfigurationsInput{
		Bucket:            aws.String("BucketName"), // Required
		ContinuationToken: aws.String("Token"),
	}
	resp, err := svc.ListBucketAnalyticsConfigurations(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListBucketInventoryConfigurations() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListBucketInventoryConfigurationsInput{
		Bucket:            aws.String("BucketName"), // Required
		ContinuationToken: aws.String("Token"),
	}
	resp, err := svc.ListBucketInventoryConfigurations(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListBucketMetricsConfigurations() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListBucketMetricsConfigurationsInput{
		Bucket:            aws.String("BucketName"), // Required
		ContinuationToken: aws.String("Token"),
	}
	resp, err := svc.ListBucketMetricsConfigurations(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListBuckets() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	var params *objectstorage.ListBucketsInput
	resp, err := svc.ListBuckets(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListMultipartUploads() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListMultipartUploadsInput{
		Bucket:         aws.String("BucketName"), // Required
		Delimiter:      aws.String("Delimiter"),
		EncodingType:   aws.String("EncodingType"),
		KeyMarker:      aws.String("KeyMarker"),
		MaxUploads:     aws.Int64(1),
		Prefix:         aws.String("Prefix"),
		UploadIdMarker: aws.String("UploadIdMarker"),
	}
	resp, err := svc.ListMultipartUploads(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListObjectVersions() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListObjectVersionsInput{
		Bucket:          aws.String("BucketName"), // Required
		Delimiter:       aws.String("Delimiter"),
		EncodingType:    aws.String("EncodingType"),
		KeyMarker:       aws.String("KeyMarker"),
		MaxKeys:         aws.Int64(1),
		Prefix:          aws.String("Prefix"),
		VersionIdMarker: aws.String("VersionIdMarker"),
	}
	resp, err := svc.ListObjectVersions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListObjects() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListObjectsInput{
		Bucket:       aws.String("BucketName"), // Required
		Delimiter:    aws.String("Delimiter"),
		EncodingType: aws.String("EncodingType"),
		Marker:       aws.String("Marker"),
		MaxKeys:      aws.Int64(1),
		Prefix:       aws.String("Prefix"),
		RequestPayer: aws.String("RequestPayer"),
	}
	resp, err := svc.ListObjects(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListObjectsV2() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListObjectsV2Input{
		Bucket:            aws.String("BucketName"), // Required
		ContinuationToken: aws.String("Token"),
		Delimiter:         aws.String("Delimiter"),
		EncodingType:      aws.String("EncodingType"),
		FetchOwner:        aws.Bool(true),
		MaxKeys:           aws.Int64(1),
		Prefix:            aws.String("Prefix"),
		RequestPayer:      aws.String("RequestPayer"),
		StartAfter:        aws.String("StartAfter"),
	}
	resp, err := svc.ListObjectsV2(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_ListParts() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.ListPartsInput{
		Bucket:           aws.String("BucketName"),        // Required
		Key:              aws.String("ObjectKey"),         // Required
		UploadId:         aws.String("MultipartUploadId"), // Required
		MaxParts:         aws.Int64(1),
		PartNumberMarker: aws.Int64(1),
		RequestPayer:     aws.String("RequestPayer"),
	}
	resp, err := svc.ListParts(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketAccelerateConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketAccelerateConfigurationInput{
		AccelerateConfiguration: &objectstorage.AccelerateConfiguration{ // Required
			Status: aws.String("BucketAccelerateStatus"),
		},
		Bucket: aws.String("BucketName"), // Required
	}
	resp, err := svc.PutBucketAccelerateConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketAcl() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketAclInput{
		Bucket: aws.String("BucketName"), // Required
		ACL:    aws.String("BucketCannedACL"),
		AccessControlPolicy: &objectstorage.AccessControlPolicy{
			Grants: []*objectstorage.Grant{
				{ // Required
					Grantee: &objectstorage.Grantee{
						Type:         aws.String("Type"), // Required
						DisplayName:  aws.String("DisplayName"),
						EmailAddress: aws.String("EmailAddress"),
						ID:           aws.String("ID"),
						URI:          aws.String("URI"),
					},
					Permission: aws.String("Permission"),
				},
				// More values...
			},
			Owner: &objectstorage.Owner{
				DisplayName: aws.String("DisplayName"),
				ID:          aws.String("ID"),
			},
		},
		ContentMD5:       aws.String("ContentMD5"),
		GrantFullControl: aws.String("GrantFullControl"),
		GrantRead:        aws.String("GrantRead"),
		GrantReadACP:     aws.String("GrantReadACP"),
		GrantWrite:       aws.String("GrantWrite"),
		GrantWriteACP:    aws.String("GrantWriteACP"),
	}
	resp, err := svc.PutBucketAcl(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketAnalyticsConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketAnalyticsConfigurationInput{
		AnalyticsConfiguration: &objectstorage.AnalyticsConfiguration{ // Required
			Id: aws.String("AnalyticsId"), // Required
			StorageClassAnalysis: &objectstorage.StorageClassAnalysis{ // Required
				DataExport: &objectstorage.StorageClassAnalysisDataExport{
					Destination: &objectstorage.AnalyticsExportDestination{ // Required
						S3BucketDestination: &objectstorage.AnalyticsS3BucketDestination{ // Required
							Bucket:          aws.String("BucketName"),                  // Required
							Format:          aws.String("AnalyticsS3ExportFileFormat"), // Required
							BucketAccountId: aws.String("AccountId"),
							Prefix:          aws.String("Prefix"),
						},
					},
					OutputSchemaVersion: aws.String("StorageClassAnalysisSchemaVersion"), // Required
				},
			},
			Filter: &objectstorage.AnalyticsFilter{
				And: &objectstorage.AnalyticsAndOperator{
					Prefix: aws.String("Prefix"),
					Tags: []*objectstorage.Tag{
						{ // Required
							Key:   aws.String("ObjectKey"), // Required
							Value: aws.String("Value"),     // Required
						},
						// More values...
					},
				},
				Prefix: aws.String("Prefix"),
				Tag: &objectstorage.Tag{
					Key:   aws.String("ObjectKey"), // Required
					Value: aws.String("Value"),     // Required
				},
			},
		},
		Bucket: aws.String("BucketName"),  // Required
		Id:     aws.String("AnalyticsId"), // Required
	}
	resp, err := svc.PutBucketAnalyticsConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketCors() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketCorsInput{
		Bucket: aws.String("BucketName"), // Required
		CORSConfiguration: &objectstorage.CORSConfiguration{ // Required
			CORSRules: []*objectstorage.CORSRule{ // Required
				{ // Required
					AllowedMethods: []*string{ // Required
						aws.String("AllowedMethod"), // Required
						// More values...
					},
					AllowedOrigins: []*string{ // Required
						aws.String("AllowedOrigin"), // Required
						// More values...
					},
					AllowedHeaders: []*string{
						aws.String("AllowedHeader"), // Required
						// More values...
					},
					ExposeHeaders: []*string{
						aws.String("ExposeHeader"), // Required
						// More values...
					},
					MaxAgeSeconds: aws.Int64(1),
				},
				// More values...
			},
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketCors(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketInventoryConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketInventoryConfigurationInput{
		Bucket: aws.String("BucketName"),  // Required
		Id:     aws.String("InventoryId"), // Required
		InventoryConfiguration: &objectstorage.InventoryConfiguration{ // Required
			Destination: &objectstorage.InventoryDestination{ // Required
				S3BucketDestination: &objectstorage.InventoryS3BucketDestination{ // Required
					Bucket:    aws.String("BucketName"),      // Required
					Format:    aws.String("InventoryFormat"), // Required
					AccountId: aws.String("AccountId"),
					Prefix:    aws.String("Prefix"),
				},
			},
			Id: aws.String("InventoryId"), // Required
			IncludedObjectVersions: aws.String("InventoryIncludedObjectVersions"), // Required
			IsEnabled:              aws.Bool(true),                                // Required
			Schedule: &objectstorage.InventorySchedule{ // Required
				Frequency: aws.String("InventoryFrequency"), // Required
			},
			Filter: &objectstorage.InventoryFilter{
				Prefix: aws.String("Prefix"), // Required
			},
			OptionalFields: []*string{
				aws.String("InventoryOptionalField"), // Required
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketInventoryConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketLifecycle() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketLifecycleInput{
		Bucket:     aws.String("BucketName"), // Required
		ContentMD5: aws.String("ContentMD5"),
		LifecycleConfiguration: &objectstorage.LifecycleConfiguration{
			Rules: []*objectstorage.Rule{ // Required
				{ // Required
					Prefix: aws.String("Prefix"),           // Required
					Status: aws.String("ExpirationStatus"), // Required
					AbortIncompleteMultipartUpload: &objectstorage.AbortIncompleteMultipartUpload{
						DaysAfterInitiation: aws.Int64(1),
					},
					Expiration: &objectstorage.LifecycleExpiration{
						Date: aws.Time(time.Now()),
						Days: aws.Int64(1),
						ExpiredObjectDeleteMarker: aws.Bool(true),
					},
					ID: aws.String("ID"),
					NoncurrentVersionExpiration: &objectstorage.NoncurrentVersionExpiration{
						NoncurrentDays: aws.Int64(1),
					},
					NoncurrentVersionTransition: &objectstorage.NoncurrentVersionTransition{
						NoncurrentDays: aws.Int64(1),
						StorageClass:   aws.String("TransitionStorageClass"),
					},
					Transition: &objectstorage.Transition{
						Date:         aws.Time(time.Now()),
						Days:         aws.Int64(1),
						StorageClass: aws.String("TransitionStorageClass"),
					},
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketLifecycle(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketLifecycleConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketLifecycleConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
		LifecycleConfiguration: &objectstorage.BucketLifecycleConfiguration{
			Rules: []*objectstorage.LifecycleRule{ // Required
				{ // Required
					Status: aws.String("ExpirationStatus"), // Required
					AbortIncompleteMultipartUpload: &objectstorage.AbortIncompleteMultipartUpload{
						DaysAfterInitiation: aws.Int64(1),
					},
					Expiration: &objectstorage.LifecycleExpiration{
						Date: aws.Time(time.Now()),
						Days: aws.Int64(1),
						ExpiredObjectDeleteMarker: aws.Bool(true),
					},
					Filter: &objectstorage.LifecycleRuleFilter{
						And: &objectstorage.LifecycleRuleAndOperator{
							Prefix: aws.String("Prefix"),
							Tags: []*objectstorage.Tag{
								{ // Required
									Key:   aws.String("ObjectKey"), // Required
									Value: aws.String("Value"),     // Required
								},
								// More values...
							},
						},
						Prefix: aws.String("Prefix"),
						Tag: &objectstorage.Tag{
							Key:   aws.String("ObjectKey"), // Required
							Value: aws.String("Value"),     // Required
						},
					},
					ID: aws.String("ID"),
					NoncurrentVersionExpiration: &objectstorage.NoncurrentVersionExpiration{
						NoncurrentDays: aws.Int64(1),
					},
					NoncurrentVersionTransitions: []*objectstorage.NoncurrentVersionTransition{
						{ // Required
							NoncurrentDays: aws.Int64(1),
							StorageClass:   aws.String("TransitionStorageClass"),
						},
						// More values...
					},
					Prefix: aws.String("Prefix"),
					Transitions: []*objectstorage.Transition{
						{ // Required
							Date:         aws.Time(time.Now()),
							Days:         aws.Int64(1),
							StorageClass: aws.String("TransitionStorageClass"),
						},
						// More values...
					},
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketLifecycleConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketLogging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketLoggingInput{
		Bucket: aws.String("BucketName"), // Required
		BucketLoggingStatus: &objectstorage.BucketLoggingStatus{ // Required
			LoggingEnabled: &objectstorage.LoggingEnabled{
				TargetBucket: aws.String("TargetBucket"),
				TargetGrants: []*objectstorage.TargetGrant{
					{ // Required
						Grantee: &objectstorage.Grantee{
							Type:         aws.String("Type"), // Required
							DisplayName:  aws.String("DisplayName"),
							EmailAddress: aws.String("EmailAddress"),
							ID:           aws.String("ID"),
							URI:          aws.String("URI"),
						},
						Permission: aws.String("BucketLogsPermission"),
					},
					// More values...
				},
				TargetPrefix: aws.String("TargetPrefix"),
			},
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketLogging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketMetricsConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketMetricsConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
		Id:     aws.String("MetricsId"),  // Required
		MetricsConfiguration: &objectstorage.MetricsConfiguration{ // Required
			Id: aws.String("MetricsId"), // Required
			Filter: &objectstorage.MetricsFilter{
				And: &objectstorage.MetricsAndOperator{
					Prefix: aws.String("Prefix"),
					Tags: []*objectstorage.Tag{
						{ // Required
							Key:   aws.String("ObjectKey"), // Required
							Value: aws.String("Value"),     // Required
						},
						// More values...
					},
				},
				Prefix: aws.String("Prefix"),
				Tag: &objectstorage.Tag{
					Key:   aws.String("ObjectKey"), // Required
					Value: aws.String("Value"),     // Required
				},
			},
		},
	}
	resp, err := svc.PutBucketMetricsConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketNotification() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketNotificationInput{
		Bucket: aws.String("BucketName"), // Required
		NotificationConfiguration: &objectstorage.NotificationConfigurationDeprecated{ // Required
			CloudFunctionConfiguration: &objectstorage.CloudFunctionConfiguration{
				CloudFunction: aws.String("CloudFunction"),
				Event:         aws.String("Event"),
				Events: []*string{
					aws.String("Event"), // Required
					// More values...
				},
				Id:             aws.String("NotificationId"),
				InvocationRole: aws.String("CloudFunctionInvocationRole"),
			},
			QueueConfiguration: &objectstorage.QueueConfigurationDeprecated{
				Event: aws.String("Event"),
				Events: []*string{
					aws.String("Event"), // Required
					// More values...
				},
				Id:    aws.String("NotificationId"),
				Queue: aws.String("QueueArn"),
			},
			TopicConfiguration: &objectstorage.TopicConfigurationDeprecated{
				Event: aws.String("Event"),
				Events: []*string{
					aws.String("Event"), // Required
					// More values...
				},
				Id:    aws.String("NotificationId"),
				Topic: aws.String("TopicArn"),
			},
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketNotification(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketNotificationConfiguration() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketNotificationConfigurationInput{
		Bucket: aws.String("BucketName"), // Required
		NotificationConfiguration: &objectstorage.NotificationConfiguration{ // Required
			LambdaFunctionConfigurations: []*objectstorage.LambdaFunctionConfiguration{
				{ // Required
					Events: []*string{ // Required
						aws.String("Event"), // Required
						// More values...
					},
					LambdaFunctionArn: aws.String("LambdaFunctionArn"), // Required
					Filter: &objectstorage.NotificationConfigurationFilter{
						Key: &objectstorage.S3KeyFilter{
							FilterRules: []*objectstorage.FilterRule{
								{ // Required
									Name:  aws.String("FilterRuleName"),
									Value: aws.String("FilterRuleValue"),
								},
								// More values...
							},
						},
					},
					Id: aws.String("NotificationId"),
				},
				// More values...
			},
			QueueConfigurations: []*objectstorage.QueueConfiguration{
				{ // Required
					Events: []*string{ // Required
						aws.String("Event"), // Required
						// More values...
					},
					QueueArn: aws.String("QueueArn"), // Required
					Filter: &objectstorage.NotificationConfigurationFilter{
						Key: &objectstorage.S3KeyFilter{
							FilterRules: []*objectstorage.FilterRule{
								{ // Required
									Name:  aws.String("FilterRuleName"),
									Value: aws.String("FilterRuleValue"),
								},
								// More values...
							},
						},
					},
					Id: aws.String("NotificationId"),
				},
				// More values...
			},
			TopicConfigurations: []*objectstorage.TopicConfiguration{
				{ // Required
					Events: []*string{ // Required
						aws.String("Event"), // Required
						// More values...
					},
					TopicArn: aws.String("TopicArn"), // Required
					Filter: &objectstorage.NotificationConfigurationFilter{
						Key: &objectstorage.S3KeyFilter{
							FilterRules: []*objectstorage.FilterRule{
								{ // Required
									Name:  aws.String("FilterRuleName"),
									Value: aws.String("FilterRuleValue"),
								},
								// More values...
							},
						},
					},
					Id: aws.String("NotificationId"),
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketNotificationConfiguration(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketPolicy() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketPolicyInput{
		Bucket:     aws.String("BucketName"), // Required
		Policy:     aws.String("Policy"),     // Required
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketPolicy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketReplication() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketReplicationInput{
		Bucket: aws.String("BucketName"), // Required
		ReplicationConfiguration: &objectstorage.ReplicationConfiguration{ // Required
			Role: aws.String("Role"), // Required
			Rules: []*objectstorage.ReplicationRule{ // Required
				{ // Required
					Destination: &objectstorage.Destination{ // Required
						Bucket:       aws.String("BucketName"), // Required
						StorageClass: aws.String("StorageClass"),
					},
					Prefix: aws.String("Prefix"),                // Required
					Status: aws.String("ReplicationRuleStatus"), // Required
					ID:     aws.String("ID"),
				},
				// More values...
			},
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketReplication(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketRequestPayment() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketRequestPaymentInput{
		Bucket: aws.String("BucketName"), // Required
		RequestPaymentConfiguration: &objectstorage.RequestPaymentConfiguration{ // Required
			Payer: aws.String("Payer"), // Required
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketRequestPayment(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketTagging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketTaggingInput{
		Bucket: aws.String("BucketName"), // Required
		Tagging: &objectstorage.Tagging{ // Required
			TagSet: []*objectstorage.Tag{ // Required
				{ // Required
					Key:   aws.String("ObjectKey"), // Required
					Value: aws.String("Value"),     // Required
				},
				// More values...
			},
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketTagging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketVersioning() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketVersioningInput{
		Bucket: aws.String("BucketName"), // Required
		VersioningConfiguration: &objectstorage.VersioningConfiguration{ // Required
			MFADelete: aws.String("MFADelete"),
			Status:    aws.String("BucketVersioningStatus"),
		},
		ContentMD5: aws.String("ContentMD5"),
		MFA:        aws.String("MFA"),
	}
	resp, err := svc.PutBucketVersioning(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutBucketWebsite() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutBucketWebsiteInput{
		Bucket: aws.String("BucketName"), // Required
		WebsiteConfiguration: &objectstorage.WebsiteConfiguration{ // Required
			ErrorDocument: &objectstorage.ErrorDocument{
				Key: aws.String("ObjectKey"), // Required
			},
			IndexDocument: &objectstorage.IndexDocument{
				Suffix: aws.String("Suffix"), // Required
			},
			RedirectAllRequestsTo: &objectstorage.RedirectAllRequestsTo{
				HostName: aws.String("HostName"), // Required
				Protocol: aws.String("Protocol"),
			},
			RoutingRules: []*objectstorage.RoutingRule{
				{ // Required
					Redirect: &objectstorage.Redirect{ // Required
						HostName:             aws.String("HostName"),
						HttpRedirectCode:     aws.String("HttpRedirectCode"),
						Protocol:             aws.String("Protocol"),
						ReplaceKeyPrefixWith: aws.String("ReplaceKeyPrefixWith"),
						ReplaceKeyWith:       aws.String("ReplaceKeyWith"),
					},
					Condition: &objectstorage.Condition{
						HttpErrorCodeReturnedEquals: aws.String("HttpErrorCodeReturnedEquals"),
						KeyPrefixEquals:             aws.String("KeyPrefixEquals"),
					},
				},
				// More values...
			},
		},
		ContentMD5: aws.String("ContentMD5"),
	}
	resp, err := svc.PutBucketWebsite(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutObject() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutObjectInput{
		Bucket:             aws.String("BucketName"), // Required
		Key:                aws.String("ObjectKey"),  // Required
		ACL:                aws.String("ObjectCannedACL"),
		Body:               []byte("PAYLOAD"),
		CacheControl:       aws.String("CacheControl"),
		ContentDisposition: aws.String("ContentDisposition"),
		ContentEncoding:    aws.String("ContentEncoding"),
		ContentLanguage:    aws.String("ContentLanguage"),
		ContentLength:      aws.Int64(1),
		ContentMD5:         aws.String("ContentMD5"),
		ContentType:        aws.String("ContentType"),
		Expires:            aws.Time(time.Now()),
		GrantFullControl:   aws.String("GrantFullControl"),
		GrantRead:          aws.String("GrantRead"),
		GrantReadACP:       aws.String("GrantReadACP"),
		GrantWriteACP:      aws.String("GrantWriteACP"),
		Metadata: map[string]*string{
			"Key": aws.String("MetadataValue"), // Required
			// More values...
		},
		RequestPayer:            aws.String("RequestPayer"),
		SSECustomerAlgorithm:    aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:          aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:       aws.String("SSECustomerKeyMD5"),
		SSEKMSKeyId:             aws.String("SSEKMSKeyId"),
		ServerSideEncryption:    aws.String("ServerSideEncryption"),
		StorageClass:            aws.String("StorageClass"),
		Tagging:                 aws.String("TaggingHeader"),
		WebsiteRedirectLocation: aws.String("WebsiteRedirectLocation"),
	}
	resp, err := svc.PutObject(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutObjectAcl() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutObjectAclInput{
		Bucket: aws.String("BucketName"), // Required
		Key:    aws.String("ObjectKey"),  // Required
		ACL:    aws.String("ObjectCannedACL"),
		AccessControlPolicy: &objectstorage.AccessControlPolicy{
			Grants: []*objectstorage.Grant{
				{ // Required
					Grantee: &objectstorage.Grantee{
						Type:         aws.String("Type"), // Required
						DisplayName:  aws.String("DisplayName"),
						EmailAddress: aws.String("EmailAddress"),
						ID:           aws.String("ID"),
						URI:          aws.String("URI"),
					},
					Permission: aws.String("Permission"),
				},
				// More values...
			},
			Owner: &objectstorage.Owner{
				DisplayName: aws.String("DisplayName"),
				ID:          aws.String("ID"),
			},
		},
		ContentMD5:       aws.String("ContentMD5"),
		GrantFullControl: aws.String("GrantFullControl"),
		GrantRead:        aws.String("GrantRead"),
		GrantReadACP:     aws.String("GrantReadACP"),
		GrantWrite:       aws.String("GrantWrite"),
		GrantWriteACP:    aws.String("GrantWriteACP"),
		RequestPayer:     aws.String("RequestPayer"),
		VersionId:        aws.String("ObjectVersionId"),
	}
	resp, err := svc.PutObjectAcl(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_PutObjectTagging() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.PutObjectTaggingInput{
		Bucket: aws.String("BucketName"), // Required
		Key:    aws.String("ObjectKey"),  // Required
		Tagging: &objectstorage.Tagging{ // Required
			TagSet: []*objectstorage.Tag{ // Required
				{ // Required
					Key:   aws.String("ObjectKey"), // Required
					Value: aws.String("Value"),     // Required
				},
				// More values...
			},
		},
		ContentMD5: aws.String("ContentMD5"),
		VersionId:  aws.String("ObjectVersionId"),
	}
	resp, err := svc.PutObjectTagging(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_RestoreObject() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.RestoreObjectInput{
		Bucket:       aws.String("BucketName"), // Required
		Key:          aws.String("ObjectKey"),  // Required
		RequestPayer: aws.String("RequestPayer"),
		RestoreRequest: &objectstorage.RestoreRequest{
			Days: aws.Int64(1), // Required
			GlacierJobParameters: &objectstorage.GlacierJobParameters{
				Tier: aws.String("Tier"), // Required
			},
		},
		VersionId: aws.String("ObjectVersionId"),
	}
	resp, err := svc.RestoreObject(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_UploadPart() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.UploadPartInput{
		Bucket:               aws.String("BucketName"),        // Required
		Key:                  aws.String("ObjectKey"),         // Required
		PartNumber:           aws.Int64(1),                    // Required
		UploadId:             aws.String("MultipartUploadId"), // Required
		Body:                 []byte("PAYLOAD"),
		ContentLength:        aws.Int64(1),
		ContentMD5:           aws.String("ContentMD5"),
		RequestPayer:         aws.String("RequestPayer"),
		SSECustomerAlgorithm: aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:       aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:    aws.String("SSECustomerKeyMD5"),
	}
	resp, err := svc.UploadPart(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Exampleobjectstorage_UploadPartCopy() {
	sess := session.Must(session.NewSession())

	svc := objectstorage.New(sess)

	params := &objectstorage.UploadPartCopyInput{
		Bucket:                         aws.String("BucketName"),        // Required
		CopySource:                     aws.String("CopySource"),        // Required
		Key:                            aws.String("ObjectKey"),         // Required
		PartNumber:                     aws.Int64(1),                    // Required
		UploadId:                       aws.String("MultipartUploadId"), // Required
		CopySourceIfMatch:              aws.String("CopySourceIfMatch"),
		CopySourceIfModifiedSince:      aws.Time(time.Now()),
		CopySourceIfNoneMatch:          aws.String("CopySourceIfNoneMatch"),
		CopySourceIfUnmodifiedSince:    aws.Time(time.Now()),
		CopySourceRange:                aws.String("CopySourceRange"),
		CopySourceSSECustomerAlgorithm: aws.String("CopySourceSSECustomerAlgorithm"),
		CopySourceSSECustomerKey:       aws.String("CopySourceSSECustomerKey"),
		CopySourceSSECustomerKeyMD5:    aws.String("CopySourceSSECustomerKeyMD5"),
		RequestPayer:                   aws.String("RequestPayer"),
		SSECustomerAlgorithm:           aws.String("SSECustomerAlgorithm"),
		SSECustomerKey:                 aws.String("SSECustomerKey"),
		SSECustomerKeyMD5:              aws.String("SSECustomerKeyMD5"),
	}
	resp, err := svc.UploadPartCopy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
