// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package mqttiface provides an interface to enable mocking the mqtt service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package mqttiface

import (
	"github.com/tily/sdk-go/aws/request"
	"github.com/tily/sdk-go/service/mqtt"
)

// mqttAPI provides an interface to enable mocking the
// mqtt.mqtt service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // mqtt.
//    func myFunc(svc mqttiface.mqttAPI) bool {
//        // Make svc.CreateMQTTInstance request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := mqtt.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockmqttClient struct {
//        mqttiface.mqttAPI
//    }
//    func (m *mockmqttClient) CreateMQTTInstance(input *mqtt.CreateMQTTInstanceInput) (*mqtt.CreateMQTTInstanceOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockmqttClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type mqttAPI interface {
	CreateMQTTInstanceRequest(*mqtt.CreateMQTTInstanceInput) (*request.Request, *mqtt.CreateMQTTInstanceOutput)

	CreateMQTTInstance(*mqtt.CreateMQTTInstanceInput) (*mqtt.CreateMQTTInstanceOutput, error)

	CreateMQTTUserRequest(*mqtt.CreateMQTTUserInput) (*request.Request, *mqtt.CreateMQTTUserOutput)

	CreateMQTTUser(*mqtt.CreateMQTTUserInput) (*mqtt.CreateMQTTUserOutput, error)

	DeleteMQTTInstanceRequest(*mqtt.DeleteMQTTInstanceInput) (*request.Request, *mqtt.DeleteMQTTInstanceOutput)

	DeleteMQTTInstance(*mqtt.DeleteMQTTInstanceInput) (*mqtt.DeleteMQTTInstanceOutput, error)

	DeleteMQTTUserRequest(*mqtt.DeleteMQTTUserInput) (*request.Request, *mqtt.DeleteMQTTUserOutput)

	DeleteMQTTUser(*mqtt.DeleteMQTTUserInput) (*mqtt.DeleteMQTTUserOutput, error)

	DescribeMQTTInstancesRequest(*mqtt.DescribeMQTTInstancesInput) (*request.Request, *mqtt.DescribeMQTTInstancesOutput)

	DescribeMQTTInstances(*mqtt.DescribeMQTTInstancesInput) (*mqtt.DescribeMQTTInstancesOutput, error)

	DescribeMQTTUsersRequest(*mqtt.DescribeMQTTUsersInput) (*request.Request, *mqtt.DescribeMQTTUsersOutput)

	DescribeMQTTUsers(*mqtt.DescribeMQTTUsersInput) (*mqtt.DescribeMQTTUsersOutput, error)

	ModifyMQTTInstanceRequest(*mqtt.ModifyMQTTInstanceInput) (*request.Request, *mqtt.ModifyMQTTInstanceOutput)

	ModifyMQTTInstance(*mqtt.ModifyMQTTInstanceInput) (*mqtt.ModifyMQTTInstanceOutput, error)

	ModifyMQTTUserRequest(*mqtt.ModifyMQTTUserInput) (*request.Request, *mqtt.ModifyMQTTUserOutput)

	ModifyMQTTUser(*mqtt.ModifyMQTTUserInput) (*mqtt.ModifyMQTTUserOutput, error)

	PublishMQTTMessageRequest(*mqtt.PublishMQTTMessageInput) (*request.Request, *mqtt.PublishMQTTMessageOutput)

	PublishMQTTMessage(*mqtt.PublishMQTTMessageInput) (*mqtt.PublishMQTTMessageOutput, error)
}

var _ mqttAPI = (*mqtt.mqtt)(nil)
