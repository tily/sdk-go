// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package rdb_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/tily/sdk-go/aws"
	"github.com/tily/sdk-go/aws/session"
	"github.com/tily/sdk-go/service/rdb"
)

var _ time.Duration
var _ bytes.Buffer

func Examplerdb_AddSourceIdentifierToSubscription() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.AddSourceIdentifierToSubscriptionInput{
		SourceIdentifier: aws.String("String"), // Required
		SubscriptionName: aws.String("String"), // Required
	}
	resp, err := svc.AddSourceIdentifierToSubscription(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_AuthorizeDBSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.AuthorizeDBSecurityGroupIngressInput{
		DBSecurityGroupName:  aws.String("String"), // Required
		CIDRIP:               aws.String("String"),
		EC2SecurityGroupName: aws.String("String"),
	}
	resp, err := svc.AuthorizeDBSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CopyDBSnapshot() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CopyDBSnapshotInput{
		SourceDBSnapshotIdentifier: aws.String("String"), // Required
		TargetDBSnapshotIdentifier: aws.String("String"), // Required
	}
	resp, err := svc.CopyDBSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CreateDBInstance() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CreateDBInstanceInput{
		AllocatedStorage:      aws.Int64(1),         // Required
		DBInstanceClass:       aws.String("String"), // Required
		DBInstanceIdentifier:  aws.String("String"), // Required
		Engine:                aws.String("String"), // Required
		MasterUserPassword:    aws.String("String"), // Required
		MasterUsername:        aws.String("String"), // Required
		AvailabilityZone:      aws.String("String"),
		BackupRetentionPeriod: aws.Int64(1),
		DBName:                aws.String("String"),
		DBParameterGroupName:  aws.String("String"),
		DBSecurityGroups: []*string{
			aws.String("String"), // Required
			// More values...
		},
		EngineVersion:                        aws.String("String"),
		LicenseModel:                         aws.String("String"),
		MultiAZ:                              aws.Bool(true),
		NiftyMasterPrivateAddress:            aws.String("String"),
		NiftyMultiAZType:                     aws.Int64(1),
		NiftyNetworkId:                       aws.String("String"),
		NiftyReadReplicaDBInstanceIdentifier: aws.String("String"),
		NiftyReadReplicaPrivateAddress:       aws.String("String"),
		NiftySlavePrivateAddress:             aws.String("String"),
		NiftyStorageType:                     aws.Int64(1),
		NiftyVirtualPrivateAddress:           aws.String("String"),
		Port: aws.Int64(1),
		PreferredBackupWindow:      aws.String("String"),
		PreferredMaintenanceWindow: aws.String("String"),
	}
	resp, err := svc.CreateDBInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CreateDBInstanceReadReplica() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CreateDBInstanceReadReplicaInput{
		DBInstanceIdentifier:           aws.String("String"), // Required
		SourceDBInstanceIdentifier:     aws.String("String"), // Required
		DBInstanceClass:                aws.String("String"),
		NiftyReadReplicaPrivateAddress: aws.String("String"),
		NiftyStorageType:               aws.Int64(1),
	}
	resp, err := svc.CreateDBInstanceReadReplica(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CreateDBParameterGroup() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CreateDBParameterGroupInput{
		DBParameterGroupFamily: aws.String("String"), // Required
		DBParameterGroupName:   aws.String("String"), // Required
		Description:            aws.String("String"), // Required
	}
	resp, err := svc.CreateDBParameterGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CreateDBSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CreateDBSecurityGroupInput{
		DBSecurityGroupDescription: aws.String("String"), // Required
		DBSecurityGroupName:        aws.String("String"), // Required
		NiftyAvailabilityZone:      aws.String("String"), // Required
	}
	resp, err := svc.CreateDBSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CreateDBSnapshot() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CreateDBSnapshotInput{
		DBInstanceIdentifier: aws.String("String"), // Required
		DBSnapshotIdentifier: aws.String("String"), // Required
	}
	resp, err := svc.CreateDBSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_CreateEventSubscription() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.CreateEventSubscriptionInput{
		NiftyEmailAddresses: []*string{ // Required
			aws.String("String"), // Required
			// More values...
		},
		SubscriptionName: aws.String("String"), // Required
		Enabled:          aws.Bool(true),
		EventCategories: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NiftyDescription: aws.String("String"),
		SourceIds: []*string{
			aws.String("String"), // Required
			// More values...
		},
		SourceType: aws.String("String"),
	}
	resp, err := svc.CreateEventSubscription(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DeleteDBInstance() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DeleteDBInstanceInput{
		DBInstanceIdentifier:      aws.String("String"), // Required
		FinalDBSnapshotIdentifier: aws.String("String"),
		SkipFinalSnapshot:         aws.Bool(true),
	}
	resp, err := svc.DeleteDBInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DeleteDBParameterGroup() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DeleteDBParameterGroupInput{
		DBParameterGroupName: aws.String("String"), // Required
	}
	resp, err := svc.DeleteDBParameterGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DeleteDBSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DeleteDBSecurityGroupInput{
		DBSecurityGroupName: aws.String("String"), // Required
	}
	resp, err := svc.DeleteDBSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DeleteDBSnapshot() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DeleteDBSnapshotInput{
		DBSnapshotIdentifier: aws.String("String"), // Required
	}
	resp, err := svc.DeleteDBSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DeleteEventSubscription() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DeleteEventSubscriptionInput{
		SubscriptionName: aws.String("String"), // Required
	}
	resp, err := svc.DeleteEventSubscription(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBEngineVersions() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBEngineVersionsInput{
		DBParameterGroupFamily: aws.String("String"),
		DefaultOnly:            aws.Bool(true),
		Engine:                 aws.String("String"),
		EngineVersion:          aws.String("String"),
		Marker:                 aws.String("String"),
		MaxRecords:             aws.Int64(1),
	}
	resp, err := svc.DescribeDBEngineVersions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBInstances() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBInstancesInput{
		DBInstanceIdentifier: aws.String("String"),
		Marker:               aws.String("String"),
		MaxRecords:           aws.Int64(1),
	}
	resp, err := svc.DescribeDBInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBLogFiles() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBLogFilesInput{
		DBInstanceIdentifier: aws.String("String"), // Required
		FileLastWritten:      aws.Int64(1),
		FileSize:             aws.Int64(1),
		FilenameContains:     aws.String("String"),
		Marker:               aws.String("String"),
		MaxRecords:           aws.Int64(1),
	}
	resp, err := svc.DescribeDBLogFiles(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBParameterGroups() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBParameterGroupsInput{
		DBParameterGroupName: aws.String("String"),
		Marker:               aws.String("String"),
		MaxRecords:           aws.Int64(1),
	}
	resp, err := svc.DescribeDBParameterGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBParameters() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBParametersInput{
		DBParameterGroupName: aws.String("String"), // Required
		Marker:               aws.String("String"),
		MaxRecords:           aws.Int64(1),
		Source:               aws.String("String"),
	}
	resp, err := svc.DescribeDBParameters(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBSecurityGroups() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBSecurityGroupsInput{
		DBSecurityGroupName: aws.String("String"),
		Marker:              aws.String("String"),
		MaxRecords:          aws.Int64(1),
	}
	resp, err := svc.DescribeDBSecurityGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeDBSnapshots() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeDBSnapshotsInput{
		DBInstanceIdentifier: aws.String("String"),
		DBSnapshotIdentifier: aws.String("String"),
		Marker:               aws.String("String"),
		MaxRecords:           aws.Int64(1),
		SnapshotType:         aws.String("String"),
	}
	resp, err := svc.DescribeDBSnapshots(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeEngineDefaultParameters() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeEngineDefaultParametersInput{
		DBParameterGroupFamily: aws.String("String"), // Required
		Marker:                 aws.String("String"),
		MaxRecords:             aws.Int64(1),
	}
	resp, err := svc.DescribeEngineDefaultParameters(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeEventCategories() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeEventCategoriesInput{
		SourceType: aws.String("String"),
	}
	resp, err := svc.DescribeEventCategories(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeEventSubscriptions() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeEventSubscriptionsInput{
		Marker:           aws.String("String"),
		MaxRecords:       aws.Int64(1),
		SubscriptionName: aws.String("String"),
	}
	resp, err := svc.DescribeEventSubscriptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeEvents() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeEventsInput{
		Duration: aws.Int64(1),
		EndTime:  aws.Time(time.Now()),
		EventCategories: []*string{
			aws.String("String"), // Required
			// More values...
		},
		Marker:           aws.String("String"),
		MaxRecords:       aws.Int64(1),
		SourceIdentifier: aws.String("String"),
		SourceType:       aws.String("String"),
		StartTime:        aws.Time(time.Now()),
	}
	resp, err := svc.DescribeEvents(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DescribeOrderableDBInstanceOptions() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DescribeOrderableDBInstanceOptionsInput{
		DBInstanceClass: aws.String("String"),
		Engine:          aws.String("String"),
		EngineVersion:   aws.String("String"),
		LicenseModel:    aws.String("String"),
		Marker:          aws.String("String"),
		MaxRecords:      aws.Int64(1),
	}
	resp, err := svc.DescribeOrderableDBInstanceOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_DownloadDBLogFilePortion() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.DownloadDBLogFilePortionInput{
		DBInstanceIdentifier: aws.String("String"), // Required
		LogFileName:          aws.String("String"),
		Marker:               aws.String("String"),
		NumberOfLines:        aws.Int64(1),
	}
	resp, err := svc.DownloadDBLogFilePortion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_ModifyDBInstance() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.ModifyDBInstanceInput{
		DBInstanceIdentifier:  aws.String("String"), // Required
		AllocatedStorage:      aws.Int64(1),
		ApplyImmediately:      aws.Bool(true),
		BackupRetentionPeriod: aws.Int64(1),
		DBInstanceClass:       aws.String("String"),
		DBParameterGroupName:  aws.String("String"),
		DBSecurityGroups: []*string{
			aws.String("String"), // Required
			// More values...
		},
		MasterUserPassword:                   aws.String("String"),
		MultiAZ:                              aws.Bool(true),
		NewDBInstanceIdentifier:              aws.String("String"),
		NiftyMultiAZType:                     aws.Int64(1),
		NiftyReadReplicaDBInstanceIdentifier: aws.String("String"),
		NiftyReadReplicaPrivateAddress:       aws.String("String"),
		NiftySlavePrivateAddress:             aws.String("String"),
		PreferredBackupWindow:                aws.String("String"),
		PreferredMaintenanceWindow:           aws.String("String"),
	}
	resp, err := svc.ModifyDBInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_ModifyDBParameterGroup() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.ModifyDBParameterGroupInput{
		DBParameterGroupName: aws.String("String"), // Required
		Parameters: []*rdb.ParametersStruct{ // Required
			{ // Required
				ApplyMethod:    aws.String("String"),
				ParameterName:  aws.String("String"),
				ParameterValue: aws.String("String"),
			},
			// More values...
		},
		Parameters: []*rdb.ParametersStruct{ // Required
			{ // Required
				ApplyMethod:    aws.String("String"),
				ParameterName:  aws.String("String"),
				ParameterValue: aws.String("String"),
			},
			// More values...
		},
		Parameters: []*rdb.ParametersStruct{ // Required
			{ // Required
				ApplyMethod:    aws.String("String"),
				ParameterName:  aws.String("String"),
				ParameterValue: aws.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.ModifyDBParameterGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_ModifyEventSubscription() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.ModifyEventSubscriptionInput{
		NiftyEmailAddresses: []*string{ // Required
			aws.String("String"), // Required
			// More values...
		},
		SubscriptionName: aws.String("String"), // Required
		Enabled:          aws.Bool(true),
		EventCategories: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NiftyDescription: aws.String("String"),
		SourceType:       aws.String("String"),
	}
	resp, err := svc.ModifyEventSubscription(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_NiftyFailoverDBInstance() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.NiftyFailoverDBInstanceInput{
		DBInstanceIdentifier: aws.String("String"), // Required
	}
	resp, err := svc.NiftyFailoverDBInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_NiftyGetMetricStatistics() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.NiftyGetMetricStatisticsInput{
		Dimensions: []*rdb.DimensionsStruct{ // Required
			{ // Required
				Name:  aws.String("String"),
				Value: aws.String("String"),
			},
			// More values...
		},
		Dimensions: []*rdb.DimensionsStruct{ // Required
			{ // Required
				Name:  aws.String("String"),
				Value: aws.String("String"),
			},
			// More values...
		},
		MetricName: aws.String("String"), // Required
		EndTime:    aws.Time(time.Now()),
		StartTime:  aws.Time(time.Now()),
	}
	resp, err := svc.NiftyGetMetricStatistics(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_RebootDBInstance() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.RebootDBInstanceInput{
		DBInstanceIdentifier: aws.String("String"), // Required
		ForceFailover:        aws.Bool(true),
		NiftyRebootType:      aws.String("String"),
	}
	resp, err := svc.RebootDBInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_RemoveSourceIdentifierFromSubscription() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.RemoveSourceIdentifierFromSubscriptionInput{
		SourceIdentifier: aws.String("String"), // Required
		SubscriptionName: aws.String("String"), // Required
	}
	resp, err := svc.RemoveSourceIdentifierFromSubscription(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_ResetDBParameterGroup() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.ResetDBParameterGroupInput{
		ApplyMethod:          aws.String("String"), // Required
		DBParameterGroupName: aws.String("String"), // Required
		ParameterName:        aws.String("String"), // Required
		Parameters: []*string{
			aws.String("String"), // Required
			// More values...
		},
		ResetAllParameters: aws.Bool(true),
	}
	resp, err := svc.ResetDBParameterGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_RestoreDBInstanceFromDBSnapshot() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.RestoreDBInstanceFromDBSnapshotInput{
		DBInstanceClass:           aws.String("String"), // Required
		DBInstanceIdentifier:      aws.String("String"), // Required
		DBSnapshotIdentifier:      aws.String("String"), // Required
		AvailabilityZone:          aws.String("String"),
		DBName:                    aws.String("String"),
		Engine:                    aws.String("String"),
		LicenseModel:              aws.String("String"),
		MultiAZ:                   aws.Bool(true),
		NiftyDBParameterGroupName: aws.String("String"),
		NiftyDBSecurityGroups: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NiftyMasterPrivateAddress:            aws.String("String"),
		NiftyMultiAZType:                     aws.Int64(1),
		NiftyNetworkId:                       aws.String("String"),
		NiftyReadReplicaDBInstanceIdentifier: aws.Int64(1),
		NiftyReadReplicaPrivateAddress:       aws.String("String"),
		NiftySlavePrivateAddress:             aws.String("String"),
		NiftyStorageType:                     aws.Int64(1),
		NiftyVirtualPrivateAddress:           aws.String("String"),
		Port: aws.Int64(1),
	}
	resp, err := svc.RestoreDBInstanceFromDBSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_RestoreDBInstanceToPointInTime() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.RestoreDBInstanceToPointInTimeInput{
		SourceDBInstanceIdentifier: aws.String("String"), // Required
		TargetDBInstanceIdentifier: aws.String("String"), // Required
		AvailabilityZone:           aws.String("String"),
		DBInstanceClass:            aws.String("String"),
		DBName:                     aws.String("String"),
		Engine:                     aws.String("String"),
		LicenseModel:               aws.String("String"),
		MultiAZ:                    aws.Bool(true),
		NiftyDBParameterGroupName:  aws.String("String"),
		NiftyDBSecurityGroups: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NiftyMasterPrivateAddress:            aws.String("String"),
		NiftyMultiAZType:                     aws.Int64(1),
		NiftyNetworkId:                       aws.String("String"),
		NiftyReadReplicaDBInstanceIdentifier: aws.String("String"),
		NiftyReadReplicaPrivateAddress:       aws.String("String"),
		NiftySlavePrivateAddress:             aws.String("String"),
		NiftyStorageType:                     aws.Int64(1),
		NiftyVirtualPrivateAddress:           aws.String("String"),
		Port:                    aws.Int64(1),
		RestoreTime:             aws.Time(time.Now()),
		UseLatestRestorableTime: aws.Bool(true),
	}
	resp, err := svc.RestoreDBInstanceToPointInTime(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplerdb_RevokeDBSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := rdb.New(sess)

	params := &rdb.RevokeDBSecurityGroupIngressInput{
		DBSecurityGroupName:  aws.String("String"), // Required
		CIDRIP:               aws.String("String"),
		EC2SecurityGroupName: aws.String("String"),
	}
	resp, err := svc.RevokeDBSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
