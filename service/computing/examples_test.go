// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package computing_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/tily/sdk-go/aws"
	"github.com/tily/sdk-go/aws/session"
	"github.com/tily/sdk-go/service/computing"
)

var _ time.Duration
var _ bytes.Buffer

func Examplecomputing_AllocateAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.AllocateAddressInput{
		Domain:         aws.String("String"),
		InstanceId:     aws.String("String"),
		NiftyPrivateIp: aws.Bool(true),
		Placement: &computing.PlacementStruct{
			AvailabilityZone: aws.String("AvailabilityZone"),
			GroupName:        aws.String("GroupName"),
		},
	}
	resp, err := svc.AllocateAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AssociateAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.AssociateAddressInput{
		InstanceId:         aws.String("String"), // Required
		AllocationId:       aws.String("String"),
		AllowReassociation: aws.Bool(true),
		NetworkInterfaceId: aws.String("String"),
		NiftyReboot:        aws.String("String"),
		PrivateIpAddress:   aws.String("String"),
		PublicIp:           aws.String("String"),
	}
	resp, err := svc.AssociateAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AssociateRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.AssociateRouteTableInput{
		RouteTableId: aws.String("String"), // Required
		Agreement:    aws.Bool(true),
		RouterId:     aws.String("String"),
		RouterName:   aws.String("String"),
		SubnetId:     aws.String("String"),
	}
	resp, err := svc.AssociateRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AssociateUsers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.AssociateUsersInput{
		FunctionName: aws.String("String"), // Required
		UsersList: []*string{ // Required
			aws.String("UserId"), // Required
			// More values...
		},
	}
	resp, err := svc.AssociateUsers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AttachVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.AttachVolumeInput{
		Device:     aws.String("String"),
		InstanceId: aws.String("String"),
		VolumeId:   aws.String("String"),
	}
	resp, err := svc.AttachVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AuthorizeSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.AuthorizeSecurityGroupIngressInput{
		GroupName: aws.String("String"),
		IpPermissionsList: [][]*string{
			{ // Required
				aws.String("CidrIp"), // Required
				// More values...
			},
			// More values...
		},
		UserId: aws.String("String"),
	}
	resp, err := svc.AuthorizeSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CancelCopyInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CancelCopyInstancesInput{
		InstanceId: aws.String("String"),
	}
	resp, err := svc.CancelCopyInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CancelUpload() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CancelUploadInput{
		ConversionTaskId: aws.String("String"), // Required
	}
	resp, err := svc.CancelUpload(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ClearLoadBalancerSession() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ClearLoadBalancerSessionInput{
		InstancePort:     aws.Int64(1),         // Required
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
	}
	resp, err := svc.ClearLoadBalancerSession(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ConfigureHealthCheck() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ConfigureHealthCheckInput{
		HealthCheck: &computing.HealthCheckStruct{ // Required
			HealthyThreshold:   aws.Int64(1),
			Interval:           aws.Int64(1),
			Target:             aws.String("Target"),
			Timeout:            aws.Int64(1),
			UnhealthyThreshold: aws.Int64(1),
		},
		HealthCheck: &computing.HealthCheckStruct{ // Required
			HealthyThreshold:   aws.Int64(1),
			Interval:           aws.Int64(1),
			Target:             aws.String("Target"),
			Timeout:            aws.Int64(1),
			UnhealthyThreshold: aws.Int64(1),
		},
		HealthCheck: &computing.HealthCheckStruct{ // Required
			HealthyThreshold:   aws.Int64(1),
			Interval:           aws.Int64(1),
			Target:             aws.String("Target"),
			Timeout:            aws.Int64(1),
			UnhealthyThreshold: aws.Int64(1),
		},
		InstancePort:     aws.Int64(1),         // Required
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
	}
	resp, err := svc.ConfigureHealthCheck(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CopyInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CopyInstancesInput{
		CopyInstance: &computing.CopyInstanceStruct{ // Required
			AccountingType: aws.String("AccountingType"),
			InstanceName:   aws.String("InstanceName"),
			InstanceType:   aws.String("InstanceType"),
			IpType:         aws.String("IpType"),
			LoadBalancersList: []*int64{
				aws.Int64(1), // Required
				// More values...
			},
			PlacementStruct: &computing.PlacementStruct{
				AvailabilityZone: aws.String("AvailabilityZone"),
				GroupName:        aws.String("GroupName"),
			},
			SecurityGroupList: []*string{
				aws.String("String"), // Required
				// More values...
			},
		},
		InstanceId: aws.String("String"), // Required
		CopyCount:  aws.Int64(1),
		NetworkInterfaceList: []*string{
			aws.String("IpAddress"), // Required
			// More values...
		},
	}
	resp, err := svc.CopyInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateCustomerGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateCustomerGatewayInput{
		IpAddress: aws.String("String"), // Required
		BgpAsn:    aws.Int64(1),
		NiftyCustomerGatewayDescription: aws.String("String"),
		NiftyCustomerGatewayName:        aws.String("String"),
		NiftyLanSideCidrBlock:           aws.String("String"),
		NiftyLanSideIpAddress:           aws.String("String"),
		Type: aws.String("String"),
	}
	resp, err := svc.CreateCustomerGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateDhcpOptions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateDhcpOptionsInput{
		DhcpConfigurationList: [][]*string{ // Required
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		DhcpConfigurationList: [][]*string{ // Required
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
	}
	resp, err := svc.CreateDhcpOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateImage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateImageInput{
		InstanceId:   aws.String("String"), // Required
		Name:         aws.String("String"), // Required
		Description:  aws.String("String"),
		LeftInstance: aws.Bool(true),
		NoReboot:     aws.Bool(true),
		Placement: &computing.PlacementStruct{
			AvailabilityZone: aws.String("AvailabilityZone"),
			GroupName:        aws.String("GroupName"),
		},
	}
	resp, err := svc.CreateImage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateKeyPair() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateKeyPairInput{
		KeyName:     aws.String("String"), // Required
		Password:    aws.String("String"), // Required
		Description: aws.String("String"),
	}
	resp, err := svc.CreateKeyPair(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateLoadBalancerInput{
		LoadBalancerName: aws.String("String"), // Required
		AccountingType:   aws.String("String"),
		AvailabilityZonesList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		IpVersion: aws.String("String"),
		ListenersList: []*string{
			aws.String("BalancingType"), // Required
			// More values...
		},
		NetworkVolume: aws.Int64(1),
	}
	resp, err := svc.CreateLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateRoute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateRouteInput{
		DestinationCidrBlock:   aws.String("String"), // Required
		RouteTableId:           aws.String("String"), // Required
		GatewayId:              aws.String("String"),
		InstanceId:             aws.String("String"),
		IpAddress:              aws.String("String"),
		NetworkId:              aws.String("String"),
		NetworkInterfaceId:     aws.String("String"),
		NetworkName:            aws.String("String"),
		VpcPeeringConnectionId: aws.String("String"),
	}
	resp, err := svc.CreateRoute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateRouteTableInput{
		VpcId: aws.String("String"),
	}
	resp, err := svc.CreateRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateSecurityGroupInput{
		GroupDescription: aws.String("String"),
		GroupName:        aws.String("String"),
		Placement: &computing.PlacementStruct{
			AvailabilityZone: aws.String("AvailabilityZone"),
			GroupName:        aws.String("GroupName"),
		},
	}
	resp, err := svc.CreateSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateSslCertificateInput{
		ApproverEmailAddress: aws.String("String"),
		CertAuthority:        aws.Int64(1),
		CertInfo: &computing.CertInfoStruct{
			CountryName:          aws.String("CountryName"),
			EmailAddress:         aws.String("EmailAddress"),
			LocationName:         aws.String("LocationName"),
			OrganizationName:     aws.String("OrganizationName"),
			OrganizationUnitName: aws.String("OrganizationUnitName"),
			StateName:            aws.String("StateName"),
		},
		Count:        aws.Int64(1),
		Fqdn:         aws.String("String"),
		FqdnId:       aws.String("String"),
		KeyLength:    aws.Int64(1),
		ValidityTerm: aws.Int64(1),
	}
	resp, err := svc.CreateSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateVolumeInput{
		AccountingType:   aws.String("String"),
		AvailabilityZone: aws.String("String"),
		Description:      aws.String("String"),
		DiskType:         aws.String("String"),
		InstanceId:       aws.String("String"),
		Size:             aws.String("String"),
		SnapshotId:       aws.String("String"),
		VolumeId:         aws.String("String"),
	}
	resp, err := svc.CreateVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateVpnConnection() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateVpnConnectionInput{
		Type:                     aws.String("String"), // Required
		VpnGatewayId:             aws.String("String"), // Required
		Agreement:                aws.Bool(true),
		CustomerGatewayId:        aws.String("String"),
		NiftyCustomerGatewayName: aws.String("String"),
		NiftyIPsecConfiguration: &computing.NiftyIPsecConfigurationStruct{
			EncryptionAlgorithm: aws.String("EncryptionAlgorithm"),
			HashAlgorithm:       aws.String("HashAlgorithm"),
			PreSharedKey:        aws.String("PreSharedKey"),
		},
		NiftyIpsecConfiguration: &computing.NiftyIpsecConfigurationStruct{
			InternetKeyExchange: aws.String("InternetKeyExchange"),
		},
		NiftyRemoteVpn: &computing.NiftyRemoteVpnStruct{
			AccountName: aws.Bool(true),
			Password:    aws.String("Password"),
		},
		NiftyTunnel: &computing.NiftyTunnelStruct{
			DestinationPort: aws.String("DestinationPort"),
			Encapsulation:   aws.String("Encapsulation"),
			Mode:            aws.String("Mode"),
			PeerSessionId:   aws.String("PeerSessionId"),
			PeerTunnelId:    aws.String("PeerTunnelId"),
			SessionId:       aws.String("SessionId"),
			SourcePort:      aws.String("SourcePort"),
			TunnelId:        aws.String("TunnelId"),
			Type:            aws.String("Type"),
		},
		NiftyVpnConnectionDescription: aws.String("String"),
		NiftyVpnConnectionMtu:         aws.String("String"),
		NiftyVpnGatewayName:           aws.String("String"),
		Options: &computing.OptionsStruct{
			NiftyIpIpTunnel:  aws.String("NiftyIpIpTunnel"),
			StaticRoutesOnly: aws.String("StaticRoutesOnly"),
		},
	}
	resp, err := svc.CreateVpnConnection(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.CreateVpnGatewayInput{
		AccountingType: aws.String("String"),
		NiftyNetwork: &computing.NiftyNetworkStruct{
			IpAddress:   aws.String("IpAddress"),
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		NiftyRedundancy:            aws.Bool(true),
		NiftyVpnGatewayDescription: aws.String("String"),
		NiftyVpnGatewayName:        aws.String("String"),
		NiftyVpnGatewayType:        aws.String("String"),
		Placement: &computing.PlacementStruct{
			AvailabilityZone: aws.String("AvailabilityZone"),
			GroupName:        aws.String("GroupName"),
		},
		SecurityGroupList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		Type: aws.String("String"),
	}
	resp, err := svc.CreateVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteCustomerGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteCustomerGatewayInput{
		CustomerGatewayId:        aws.String("String"),
		NiftyCustomerGatewayName: aws.String("String"),
	}
	resp, err := svc.DeleteCustomerGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteDhcpOptions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteDhcpOptionsInput{
		DhcpOptionsId: aws.String("String"), // Required
	}
	resp, err := svc.DeleteDhcpOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteImage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteImageInput{
		ImageId: aws.String("String"), // Required
	}
	resp, err := svc.DeleteImage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteKeyPair() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteKeyPairInput{
		KeyName: aws.String("String"), // Required
	}
	resp, err := svc.DeleteKeyPair(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteLoadBalancerInput{
		InstancePort:     aws.Int64(1),         // Required
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
	}
	resp, err := svc.DeleteLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteRoute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteRouteInput{
		DestinationCidrBlock: aws.String("String"), // Required
		RouteTableId:         aws.String("String"), // Required
	}
	resp, err := svc.DeleteRoute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteRouteTableInput{
		RouteTableId: aws.String("String"), // Required
	}
	resp, err := svc.DeleteRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteSecurityGroupInput{
		GroupName: aws.String("String"),
	}
	resp, err := svc.DeleteSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteSslCertificateInput{
		FqdnId: aws.String("String"), // Required
	}
	resp, err := svc.DeleteSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteVolumeInput{
		VolumeId: aws.String("String"),
	}
	resp, err := svc.DeleteVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteVpnConnection() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteVpnConnectionInput{
		VpnConnectionId: aws.String("String"), // Required
		Agreement:       aws.Bool(true),
	}
	resp, err := svc.DeleteVpnConnection(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeleteVpnGatewayInput{
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.DeleteVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeregisterInstancesFromLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeregisterInstancesFromLoadBalancerInput{
		InstancePort: aws.Int64(1), // Required
		InstancesList: []*string{ // Required
			aws.String("InstanceId"), // Required
			// More values...
		},
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
	}
	resp, err := svc.DeregisterInstancesFromLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeregisterInstancesFromSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DeregisterInstancesFromSecurityGroupInput{
		GroupName: aws.String("String"),
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DeregisterInstancesFromSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeAddresses() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeAddressesInput{
		PublicIpList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeAddresses(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeAssociatedUsers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeAssociatedUsersInput{
		FunctionName: aws.String("String"), // Required
	}
	resp, err := svc.DescribeAssociatedUsers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeAvailabilityZones() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeAvailabilityZonesInput{
		ZoneNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeAvailabilityZones(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeCustomerGateways() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeCustomerGatewaysInput{
		CustomerGatewayIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		NiftyCustomerGatewayNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeCustomerGateways(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeDhcpOptions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeDhcpOptionsInput{
		DescribeDhcpOptionsResponse: aws.String("String"),
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
	}
	resp, err := svc.DescribeDhcpOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeImages() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeImagesInput{
		ExecutableByList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		ImageIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		ImageNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		OwnerList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeImages(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeInstanceAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeInstanceAttributeInput{
		Attribute:  aws.String("String"),
		InstanceId: aws.String("String"),
	}
	resp, err := svc.DescribeInstanceAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeInstanceHealth() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeInstanceHealthInput{
		InstancePort:     aws.Int64(1),         // Required
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
		InstancesList: []*string{
			aws.String("InstanceId"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeInstanceHealth(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeInstancesInput{
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		TenancyList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeKeyPairs() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeKeyPairsInput{
		KeyNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeKeyPairs(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeLoadBalancers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeLoadBalancersInput{
		LoadBalancerNames: &computing.LoadBalancerNamesStruct{
			InstancePortList: []*int64{
				aws.Int64(1), // Required
				// More values...
			},
			LoadBalancerPortList: []*string{
				aws.String("String"), // Required
				// More values...
			},
		},
		LoadBalancerNamesList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeLoadBalancers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeRegions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeRegionsInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		RegionNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeRegions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeResources() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeResourcesInput
	resp, err := svc.DescribeResources(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeRouteTables() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeRouteTablesInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		RouteTableIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeRouteTables(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSecurityActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeSecurityActivitiesInput{
		ActivityDate: aws.String("String"),
		GroupName:    aws.String("String"),
		Range: &computing.RangeStruct{
			All:         aws.Bool(true),
			EndNumber:   aws.Int64(1),
			StartNumber: aws.Int64(1),
		},
	}
	resp, err := svc.DescribeSecurityActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSecurityGroupOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeSecurityGroupOptionInput
	resp, err := svc.DescribeSecurityGroupOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSecurityGroups() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeSecurityGroupsInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		GroupNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSecurityGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeServiceStatus() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeServiceStatusInput{
		FromDate: aws.String("String"),
		ToDate:   aws.String("String"),
	}
	resp, err := svc.DescribeServiceStatus(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSslCertificateAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeSslCertificateAttributeInput{
		FqdnId:    aws.String("String"), // Required
		Attribute: aws.String("String"),
	}
	resp, err := svc.DescribeSslCertificateAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSslCertificates() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeSslCertificatesInput{
		FqdnIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		FqdnList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSslCertificates(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeUploads() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeUploadsInput{
		ConversionTaskIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeUploads(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeUsage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeUsageInput{
		IsCharge:  aws.Bool(true),
		Region:    aws.String("String"),
		YearMonth: aws.String("String"),
	}
	resp, err := svc.DescribeUsage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeUserActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeUserActivitiesInput{
		Range: &computing.RangeStruct{
			All:         aws.Bool(true),
			EndNumber:   aws.Int64(1),
			StartNumber: aws.Int64(1),
		},
		YearMonth: aws.String("String"),
	}
	resp, err := svc.DescribeUserActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeVolumes() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeVolumesInput{
		VolumeIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVolumes(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeVpnConnections() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeVpnConnectionsInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		VpnConnectionIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVpnConnections(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeVpnGateways() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DescribeVpnGatewaysInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		NiftyVpnGatewayNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		VpnGatewayIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVpnGateways(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DetachVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DetachVolumeInput{
		VolumeId:   aws.String("String"), // Required
		Agreement:  aws.Bool(true),
		Device:     aws.String("String"),
		Force:      aws.Bool(true),
		InstanceId: aws.String("String"),
	}
	resp, err := svc.DetachVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DisassociateAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DisassociateAddressInput{
		AssociationId:    aws.String("String"),
		NiftyReboot:      aws.String("String"),
		PrivateIpAddress: aws.String("String"),
		PublicIp:         aws.String("String"),
	}
	resp, err := svc.DisassociateAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DisassociateRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DisassociateRouteTableInput{
		AssociationId: aws.String("String"), // Required
		Agreement:     aws.Bool(true),
	}
	resp, err := svc.DisassociateRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DissociateUsers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DissociateUsersInput{
		FunctionName: aws.String("String"), // Required
		UsersList: []*string{ // Required
			aws.String("UserId"), // Required
			// More values...
		},
	}
	resp, err := svc.DissociateUsers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DownloadSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.DownloadSslCertificateInput{
		FileType: aws.String("String"), // Required
		FqdnId:   aws.String("String"), // Required
	}
	resp, err := svc.DownloadSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ImportInstance() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ImportInstanceInput{
		Ovf:            aws.String("String"), // Required
		AccountingType: aws.String("String"),
		Architecture:   aws.String("String"),
		Description:    aws.String("String"),
		DiskImageList: []*computing.VolumeStruct{
			{ // Required
				Size: aws.Int64(1),
			},
			// More values...
		},
		InstanceId:                        aws.String("String"),
		InstanceInitiatedShutdownBehavior: aws.String("String"),
		InstanceType:                      aws.String("String"),
		IpType:                            aws.String("String"),
		Monitoring: &computing.MonitoringStruct{
			Enabled: aws.Bool(true),
		},
		NetworkInterfaceList: []*string{
			aws.String("IpAddress"), // Required
			// More values...
		},
		Placement: &computing.PlacementStruct{
			AvailabilityZone: aws.String("AvailabilityZone"),
			GroupName:        aws.String("GroupName"),
		},
		Platform:         aws.String("String"),
		PrivateIpAddress: aws.String("String"),
		PublicIp:         aws.String("String"),
		SecurityGroupList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		SubnetId: aws.String("String"),
		UserData: aws.String("String"),
	}
	resp, err := svc.ImportInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ImportKeyPair() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ImportKeyPairInput{
		KeyName:           aws.String("String"), // Required
		PublicKeyMaterial: aws.String("String"), // Required
		Description:       aws.String("String"),
	}
	resp, err := svc.ImportKeyPair(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifyImageAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ModifyImageAttributeInput{
		ImageId:   aws.String("String"), // Required
		Attribute: aws.String("String"),
		LaunchPermission: &computing.LaunchPermissionStruct{
			AddList: []*string{
				aws.String("Group"), // Required
				// More values...
			},
			RemoveList: []*string{
				aws.String("Group"), // Required
				// More values...
			},
		},
		ProductCodeList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		Value: aws.String("String"),
	}
	resp, err := svc.ModifyImageAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifyInstanceAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ModifyInstanceAttributeInput{
		Attribute:   aws.String("String"), // Required
		InstanceId:  aws.String("String"), // Required
		Value:       aws.String("String"), // Required
		Force:       aws.Bool(true),
		NiftyReboot: aws.String("String"),
		Tenancy:     aws.String("String"),
	}
	resp, err := svc.ModifyInstanceAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifySslCertificateAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ModifySslCertificateAttributeInput{
		FqdnId: aws.String("String"), // Required
		Description: &computing.DescriptionStruct{
			Value: aws.String("Value"),
		},
	}
	resp, err := svc.ModifySslCertificateAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifyVolumeAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ModifyVolumeAttributeInput{
		VolumeId:  aws.String("String"), // Required
		Attribute: aws.String("String"),
		Value:     aws.String("String"),
	}
	resp, err := svc.ModifyVolumeAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyAssociateImage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyAssociateImageInput{
		ImageId: aws.String("String"), // Required
		DistributionIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		IsPublic:       aws.Bool(true),
		IsRedistribute: aws.Bool(true),
	}
	resp, err := svc.NiftyAssociateImage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyAssociateNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyAssociateNatTableInput{
		NatTableId: aws.String("String"), // Required
		Agreement:  aws.Bool(true),
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyAssociateNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyAssociateRouteTableWithVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyAssociateRouteTableWithVpnGatewayInput{
		RouteTableId:        aws.String("String"), // Required
		Agreement:           aws.Bool(true),
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyAssociateRouteTableWithVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateAlarm() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateAlarmInput{
		EmailAddressList: []*string{ // Required
			aws.String("String"), // Required
			// More values...
		},
		FunctionName: aws.String("String"), // Required
		RuleList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		RuleList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		AlarmCondition: aws.String("String"),
		Description:    aws.String("String"),
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		LoadBalancerNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		LoadBalancerPortList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		PartitionList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		RuleName: aws.String("String"),
		Zone:     aws.String("String"),
	}
	resp, err := svc.NiftyCreateAlarm(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateAutoScalingGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateAutoScalingGroupInput{
		AutoScalingGroupName: aws.String("String"), // Required
		ChangeInCapacity:     aws.Int64(1),         // Required
		ImageId:              aws.String("String"), // Required
		MaxSize:              aws.Int64(1),         // Required
		MinSize:              aws.Int64(1),         // Required
		ScaleoutCondition:    aws.String("String"), // Required
		ScalingTriggerList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		ScalingTriggerList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		DefaultCooldown:        aws.Int64(1),
		Description:            aws.String("String"),
		InstanceLifecycleLimit: aws.Int64(1),
		InstanceType:           aws.String("String"),
		LoadBalancersList: []*int64{
			aws.Int64(1), // Required
			// More values...
		},
		Scaleout: aws.Int64(1),
		ScalingScheduleList: []*computing.MonthStruct{
			{ // Required
				EndingMonth:   aws.String("EndingMonth"),
				StartingMonth: aws.String("StartingMonth"),
			},
			// More values...
		},
		SecurityGroupList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyCreateAutoScalingGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateDhcpConfig() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateDhcpConfigInput
	resp, err := svc.NiftyCreateDhcpConfig(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateDhcpIpAddressPool() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateDhcpIpAddressPoolInput{
		DhcpConfigId:   aws.String("String"), // Required
		StartIpAddress: aws.String("String"), // Required
		StopIpAddress:  aws.String("String"), // Required
		Description:    aws.String("String"),
	}
	resp, err := svc.NiftyCreateDhcpIpAddressPool(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateDhcpStaticMapping() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateDhcpStaticMappingInput{
		DhcpConfigId: aws.String("String"), // Required
		IpAddress:    aws.String("String"), // Required
		MacAddress:   aws.String("String"), // Required
		Description:  aws.String("String"),
	}
	resp, err := svc.NiftyCreateDhcpStaticMapping(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateInstanceSnapshot() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateInstanceSnapshotInput{
		InstanceId:   aws.String("String"), // Required
		SnapshotName: aws.String("String"), // Required
		Description:  aws.String("String"),
	}
	resp, err := svc.NiftyCreateInstanceSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateNatRule() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateNatRuleInput{
		NatTableId:  aws.String("String"), // Required
		NatType:     aws.String("String"), // Required
		Protocol:    aws.String("String"), // Required
		RuleNumber:  aws.String("String"), // Required
		Description: aws.String("String"),
		Destination: &computing.DestinationStruct{
			Port: aws.Int64(1),
		},
		InboundInterface: &computing.InboundInterfaceStruct{
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		OutboundInterface: &computing.OutboundInterfaceStruct{
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		Source: &computing.SourceStruct{
			Address: aws.String("Address"),
			Port:    aws.Int64(1),
		},
		Translation: &computing.TranslationStruct{
			Address: aws.String("Address"),
			Port:    aws.Int64(1),
		},
	}
	resp, err := svc.NiftyCreateNatRule(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateNatTableInput
	resp, err := svc.NiftyCreateNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreatePrivateLan() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreatePrivateLanInput{
		CidrBlock:        aws.String("String"), // Required
		AccountingType:   aws.String("String"),
		AvailabilityZone: aws.String("String"),
		Description:      aws.String("String"),
		PrivateLanName:   aws.String("String"),
	}
	resp, err := svc.NiftyCreatePrivateLan(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateRouter() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateRouterInput{
		AccountingType:   aws.String("String"),
		AvailabilityZone: aws.String("String"),
		Description:      aws.String("String"),
		NetworkInterfaceList: []*string{
			aws.String("IpAddress"), // Required
			// More values...
		},
		RouterName: aws.String("String"),
		SecurityGroupList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		Type: aws.String("String"),
	}
	resp, err := svc.NiftyCreateRouter(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateWebProxy() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyCreateWebProxyInput{
		ListenPort: aws.String("String"), // Required
		Agreement:  aws.Bool(true),
		BypassInterface: &computing.BypassInterfaceStruct{
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		Description: aws.String("String"),
		ListenInterface: &computing.ListenInterfaceStruct{
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		Option: &computing.OptionStruct{
			NameServer: aws.String("NameServer"),
		},
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyCreateWebProxy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteAlarm() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteAlarmInput{
		FunctionName: aws.String("String"),
		RuleName:     aws.String("String"),
	}
	resp, err := svc.NiftyDeleteAlarm(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteAutoScalingGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteAutoScalingGroupInput{
		AutoScalingGroupName: aws.String("String"), // Required
	}
	resp, err := svc.NiftyDeleteAutoScalingGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteDhcpConfig() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteDhcpConfigInput{
		DhcpConfigId: aws.String("String"), // Required
	}
	resp, err := svc.NiftyDeleteDhcpConfig(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteDhcpIpAddressPool() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteDhcpIpAddressPoolInput{
		DhcpConfigId:   aws.String("String"), // Required
		StartIpAddress: aws.String("String"), // Required
		StopIpAddress:  aws.String("String"), // Required
	}
	resp, err := svc.NiftyDeleteDhcpIpAddressPool(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteDhcpStaticMapping() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteDhcpStaticMappingInput{
		DhcpConfigId: aws.String("String"), // Required
		IpAddress:    aws.String("String"), // Required
		MacAddress:   aws.String("String"), // Required
	}
	resp, err := svc.NiftyDeleteDhcpStaticMapping(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteInstanceSnapshot() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteInstanceSnapshotInput{
		InstanceSnapshotIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		SnapshotNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDeleteInstanceSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteNatRule() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteNatRuleInput{
		NatTableId: aws.String("String"), // Required
		NatType:    aws.String("String"), // Required
		RuleNumber: aws.String("String"), // Required
	}
	resp, err := svc.NiftyDeleteNatRule(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteNatTableInput{
		NatTableId: aws.String("String"), // Required
	}
	resp, err := svc.NiftyDeleteNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeletePrivateLan() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeletePrivateLanInput{
		NetworkId:      aws.String("String"),
		PrivateLanName: aws.String("String"),
	}
	resp, err := svc.NiftyDeletePrivateLan(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteRouter() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteRouterInput{
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyDeleteRouter(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteWebProxy() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeleteWebProxyInput{
		Agreement:  aws.Bool(true),
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyDeleteWebProxy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeregisterRoutersFromSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeregisterRoutersFromSecurityGroupInput{
		GroupName: aws.String("String"), // Required
		RouterSetList: []*string{
			aws.String("RouterName"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDeregisterRoutersFromSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeregisterVpnGatewaysFromSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDeregisterVpnGatewaysFromSecurityGroupInput{
		GroupName: aws.String("String"), // Required
		RouterSetList: []*string{
			aws.String("RouterName"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDeregisterVpnGatewaysFromSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarmHistory() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeAlarmHistoryInput{
		RuleList: []*int64{
			aws.Int64(1), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeAlarmHistory(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarmRulesActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeAlarmRulesActivitiesInput{
		RuleList: []*int64{
			aws.Int64(1), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeAlarmRulesActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarms() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeAlarmsInput{
		RuleList: []*int64{
			aws.Int64(1), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeAlarms(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarmsPartitions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeAlarmsPartitionsInput{
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeAlarmsPartitions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAutoScalingGroups() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeAutoScalingGroupsInput{
		AutoScalingGroupNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeAutoScalingGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeCorporateInfoForCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeCorporateInfoForCertificateInput
	resp, err := svc.NiftyDescribeCorporateInfoForCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeDhcpConfigs() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeDhcpConfigsInput{
		DhcpConfigId: aws.String("String"),
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeDhcpConfigs(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeDhcpStatus() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeDhcpStatusInput{
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyDescribeDhcpStatus(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeInstanceSnapshots() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeInstanceSnapshotsInput{
		InstanceSnapshotIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		SnapshotNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeInstanceSnapshots(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeNatTables() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeNatTablesInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		NatTableIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeNatTables(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribePerformanceChart() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribePerformanceChartInput{
		FunctionName: aws.String("String"), // Required
		ResourceNameList: []*string{ // Required
			aws.String("String"), // Required
			// More values...
		},
		DataTypeList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		FromDate:  aws.String("String"),
		ToDate:    aws.String("String"),
		ValueType: aws.String("String"),
	}
	resp, err := svc.NiftyDescribePerformanceChart(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribePrivateLans() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribePrivateLansInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		NetworkIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		PrivateLanNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribePrivateLans(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeRouters() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeRoutersInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		RouterIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		RouterNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeRouters(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeScalingActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeScalingActivitiesInput{
		AutoScalingGroupName: aws.String("String"), // Required
		ActivityDateFrom:     aws.String("String"),
		ActivityDateTo:       aws.String("String"),
		Range: &computing.RangeStruct{
			All:         aws.Bool(true),
			EndNumber:   aws.Int64(1),
			StartNumber: aws.Int64(1),
		},
	}
	resp, err := svc.NiftyDescribeScalingActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeVpnGatewayActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeVpnGatewayActivitiesInput{
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyDescribeVpnGatewayActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeWebProxies() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDescribeWebProxiesInput{
		FilterList: [][]*string{
			{ // Required
				aws.String("String"), // Required
				// More values...
			},
			// More values...
		},
		RouterIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		RouterNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyDescribeWebProxies(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDisableDhcp() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDisableDhcpInput{
		Agreement:   aws.Bool(true),
		NetworkId:   aws.String("String"),
		NetworkName: aws.String("String"),
		RouterId:    aws.String("String"),
		RouterName:  aws.String("String"),
	}
	resp, err := svc.NiftyDisableDhcp(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDisassociateNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDisassociateNatTableInput{
		AssociationId: aws.String("String"), // Required
		Agreement:     aws.Bool(true),
	}
	resp, err := svc.NiftyDisassociateNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDisassociateRouteTableFromVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyDisassociateRouteTableFromVpnGatewayInput{
		AssociationId: aws.String("String"), // Required
		Agreement:     aws.Bool(true),
	}
	resp, err := svc.NiftyDisassociateRouteTableFromVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyEnableDhcp() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyEnableDhcpInput{
		Agreement:     aws.Bool(true),
		DhcpConfigId:  aws.String("String"),
		DhcpOptionsId: aws.String("String"),
		NetworkId:     aws.String("String"),
		NetworkName:   aws.String("String"),
		RouterId:      aws.String("String"),
		RouterName:    aws.String("String"),
	}
	resp, err := svc.NiftyEnableDhcp(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyAddressAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyAddressAttributeInput{
		Attribute:        aws.String("String"), // Required
		Value:            aws.String("String"), // Required
		PrivateIpAddress: aws.String("String"),
		PublicIp:         aws.String("String"),
	}
	resp, err := svc.NiftyModifyAddressAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyCustomerGatewayAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyCustomerGatewayAttributeInput{
		Attribute:                aws.String("String"), // Required
		Value:                    aws.String("String"), // Required
		CustomerGatewayId:        aws.String("String"),
		NiftyCustomerGatewayName: aws.String("String"),
	}
	resp, err := svc.NiftyModifyCustomerGatewayAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyInstanceSnapshotAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyInstanceSnapshotAttributeInput{
		Attribute:          aws.String("String"), // Required
		Value:              aws.String("String"), // Required
		InstanceSnapshotId: aws.String("String"),
		SnapshotName:       aws.String("String"),
	}
	resp, err := svc.NiftyModifyInstanceSnapshotAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyKeyPairAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyKeyPairAttributeInput{
		Attribute: aws.String("String"), // Required
		KeyName:   aws.String("String"), // Required
		Value:     aws.String("String"), // Required
	}
	resp, err := svc.NiftyModifyKeyPairAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyPrivateLanAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyPrivateLanAttributeInput{
		Attribute:      aws.String("String"), // Required
		Value:          aws.String("String"), // Required
		NetworkId:      aws.String("String"),
		PrivateLanName: aws.String("String"),
	}
	resp, err := svc.NiftyModifyPrivateLanAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyRouterAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyRouterAttributeInput{
		Attribute:  aws.String("String"), // Required
		Value:      aws.String("String"), // Required
		Agreement:  aws.Bool(true),
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyModifyRouterAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyVpnGatewayAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyVpnGatewayAttributeInput{
		Attribute:           aws.String("String"), // Required
		Value:               aws.String("String"), // Required
		Agreement:           aws.Bool(true),
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyModifyVpnGatewayAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyWebProxyAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyModifyWebProxyAttributeInput{
		Value:      aws.String("String"), // Required
		Agreement:  aws.Bool(true),
		Attribute:  aws.String("String"),
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyModifyWebProxyAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRebootRouters() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRebootRoutersInput{
		RouterList: []*string{
			aws.String("NiftyReboot"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyRebootRouters(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRebootVpnGateways() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRebootVpnGatewaysInput{
		VpnGatewayList: []*string{
			aws.String("NiftyReboot"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyRebootVpnGateways(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRegisterRoutersWithSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRegisterRoutersWithSecurityGroupInput{
		GroupName: aws.String("String"), // Required
		RouterSetList: []*string{
			aws.String("RouterName"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyRegisterRoutersWithSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRegisterVpnGatewaysWithSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRegisterVpnGatewaysWithSecurityGroupInput{
		GroupName: aws.String("String"), // Required
		VpnGatewaySetList: []*string{
			aws.String("NiftyVpnGatewayName"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyRegisterVpnGatewaysWithSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReleaseRouterBackupState() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReleaseRouterBackupStateInput{
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyReleaseRouterBackupState(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReleaseVpnGatewayBackupState() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReleaseVpnGatewayBackupStateInput{
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyReleaseVpnGatewayBackupState(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceDhcpConfig() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceDhcpConfigInput{
		DhcpConfigId: aws.String("String"), // Required
		Agreement:    aws.Bool(true),
		NetworkId:    aws.String("String"),
		NetworkName:  aws.String("String"),
		RouterId:     aws.String("String"),
		RouterName:   aws.String("String"),
	}
	resp, err := svc.NiftyReplaceDhcpConfig(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceDhcpOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceDhcpOptionInput{
		DhcpOptionsId: aws.String("String"), // Required
		Agreement:     aws.Bool(true),
		NetworkId:     aws.String("String"),
		NetworkName:   aws.String("String"),
		RouterId:      aws.String("String"),
		RouterName:    aws.String("String"),
	}
	resp, err := svc.NiftyReplaceDhcpOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceNatRule() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceNatRuleInput{
		NatTableId:  aws.String("String"), // Required
		NatType:     aws.String("String"), // Required
		Protocol:    aws.String("String"), // Required
		RuleNumber:  aws.String("String"), // Required
		Description: aws.String("String"),
		Destination: &computing.DestinationStruct{
			Port: aws.Int64(1),
		},
		InboundInterface: &computing.InboundInterfaceStruct{
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		OutboundInterface: &computing.OutboundInterfaceStruct{
			NetworkId:   aws.String("NetworkId"),
			NetworkName: aws.String("NetworkName"),
		},
		Source: &computing.SourceStruct{
			Address: aws.String("Address"),
			Port:    aws.Int64(1),
		},
		Translation: &computing.TranslationStruct{
			Address: aws.String("Address"),
			Port:    aws.Int64(1),
		},
	}
	resp, err := svc.NiftyReplaceNatRule(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceNatTableAssociation() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceNatTableAssociationInput{
		AssociationId: aws.String("String"), // Required
		NatTableId:    aws.String("String"), // Required
		Agreement:     aws.Bool(true),
	}
	resp, err := svc.NiftyReplaceNatTableAssociation(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceRouteTableAssociationWithVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceRouteTableAssociationWithVpnGatewayInput{
		AssociationId: aws.String("String"), // Required
		RouteTableId:  aws.String("String"), // Required
		Agreement:     aws.Bool(true),
	}
	resp, err := svc.NiftyReplaceRouteTableAssociationWithVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceRouterLatestVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceRouterLatestVersionInput{
		Agreement:  aws.Bool(true),
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyReplaceRouterLatestVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceVpnGatewayLatestVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyReplaceVpnGatewayLatestVersionInput{
		Agreement:           aws.Bool(true),
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyReplaceVpnGatewayLatestVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRestoreInstanceSnapshot() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRestoreInstanceSnapshotInput{
		InstanceSnapshotId: aws.String("String"),
		SnapshotName:       aws.String("String"),
	}
	resp, err := svc.NiftyRestoreInstanceSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRestoreRouterPreviousVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRestoreRouterPreviousVersionInput{
		RouterId:   aws.String("String"),
		RouterName: aws.String("String"),
	}
	resp, err := svc.NiftyRestoreRouterPreviousVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRestoreVpnGatewayPreviousVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRestoreVpnGatewayPreviousVersionInput{
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyRestoreVpnGatewayPreviousVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRetryImportInstance() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyRetryImportInstanceInput{
		InstanceId: aws.String("String"), // Required
	}
	resp, err := svc.NiftyRetryImportInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateAlarm() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyUpdateAlarmInput{
		FunctionName: aws.String("String"), // Required
		RuleList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		AlarmCondition: aws.String("String"),
		Description:    aws.String("String"),
		EmailAddressList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		LoadBalancerNameList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		LoadBalancerPortList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		PartitionList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		RuleName:       aws.String("String"),
		RuleNameUpdate: aws.String("String"),
	}
	resp, err := svc.NiftyUpdateAlarm(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateAutoScalingGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyUpdateAutoScalingGroupInput{
		AutoScalingGroupName: aws.String("String"), // Required
		ChangeInCapacity:     aws.Int64(1),         // Required
		MaxSize:              aws.Int64(1),         // Required
		MinSize:              aws.Int64(1),         // Required
		ScaleoutCondition:    aws.String("String"), // Required
		ScalingTriggerList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		ScalingTriggerList: []*int64{ // Required
			aws.Int64(1), // Required
			// More values...
		},
		AutoScalingGroupNameUpdate: aws.String("String"),
		DefaultCooldown:            aws.Int64(1),
		Description:                aws.String("String"),
		ImageId:                    aws.String("String"),
		InstanceLifecycleLimit:     aws.Int64(1),
		InstanceType:               aws.String("String"),
		LoadBalancersList: []*int64{
			aws.Int64(1), // Required
			// More values...
		},
		Scaleout: aws.Int64(1),
		ScalingScheduleList: []*computing.MonthStruct{
			{ // Required
				EndingMonth:   aws.String("EndingMonth"),
				StartingMonth: aws.String("StartingMonth"),
			},
			// More values...
		},
		SecurityGroupList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.NiftyUpdateAutoScalingGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateInstanceNetworkInterfaces() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyUpdateInstanceNetworkInterfacesInput{
		InstanceId: aws.String("String"), // Required
		NetworkInterfaceList: []*string{
			aws.String("IpAddress"), // Required
			// More values...
		},
		NiftyReboot: aws.String("String"),
	}
	resp, err := svc.NiftyUpdateInstanceNetworkInterfaces(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateRouterNetworkInterfaces() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyUpdateRouterNetworkInterfacesInput{
		Agreement: aws.Bool(true),
		NetworkInterfaceList: []*string{
			aws.String("IpAddress"), // Required
			// More values...
		},
		NiftyReboot: aws.String("String"),
		RouterId:    aws.String("String"),
		RouterName:  aws.String("String"),
	}
	resp, err := svc.NiftyUpdateRouterNetworkInterfaces(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateVpnGatewayNetworkInterfaces() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.NiftyUpdateVpnGatewayNetworkInterfacesInput{
		Agreement: aws.Bool(true),
		NetworkInterface: &computing.NetworkInterfaceStruct{
			IpAddress: aws.String("IpAddress"),
		},
		NiftyReboot:         aws.String("String"),
		NiftyVpnGatewayName: aws.String("String"),
		VpnGatewayId:        aws.String("String"),
	}
	resp, err := svc.NiftyUpdateVpnGatewayNetworkInterfaces(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RebootInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RebootInstancesInput{
		Force: aws.Bool(true),
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NiftyIsBios: aws.Bool(true),
		TenancyList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		UserData: &computing.UserDataStruct{
			Encoding: aws.String("Encoding"),
		},
	}
	resp, err := svc.RebootInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterCorporateInfoForCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RegisterCorporateInfoForCertificateInput{
		Agreement:      aws.Bool(true),       // Required
		AlphabetName1:  aws.String("String"), // Required
		AlphabetName2:  aws.String("String"), // Required
		City:           aws.String("String"), // Required
		CorpGrade:      aws.String("String"), // Required
		CorpName:       aws.String("String"), // Required
		DivisionName:   aws.String("String"), // Required
		EmailAddress:   aws.String("String"), // Required
		KanaName1:      aws.String("String"), // Required
		KanaName2:      aws.String("String"), // Required
		Name1:          aws.String("String"), // Required
		Name2:          aws.String("String"), // Required
		PhoneNumber:    aws.String("String"), // Required
		PostName:       aws.String("String"), // Required
		Pref:           aws.String("String"), // Required
		PresidentName1: aws.String("String"), // Required
		PresidentName2: aws.String("String"), // Required
		Zip1:           aws.String("String"), // Required
		Zip2:           aws.String("String"), // Required
		TdbCode:        aws.String("String"),
	}
	resp, err := svc.RegisterCorporateInfoForCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterInstancesWithLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RegisterInstancesWithLoadBalancerInput{
		InstancePort: aws.Int64(1), // Required
		InstancesList: []*string{ // Required
			aws.String("InstanceId"), // Required
			// More values...
		},
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
	}
	resp, err := svc.RegisterInstancesWithLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterInstancesWithSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RegisterInstancesWithSecurityGroupInput{
		GroupName: aws.String("String"),
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.RegisterInstancesWithSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterPortWithLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RegisterPortWithLoadBalancerInput{
		LoadBalancerName: aws.String("String"), // Required
		ListenersList: []*string{
			aws.String("BalancingType"), // Required
			// More values...
		},
	}
	resp, err := svc.RegisterPortWithLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ReleaseAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ReleaseAddressInput{
		AllocationId:     aws.String("String"),
		PrivateIpAddress: aws.String("String"),
		PublicIp:         aws.String("String"),
	}
	resp, err := svc.ReleaseAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ReplaceRoute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ReplaceRouteInput{
		DestinationCidrBlock:   aws.String("String"), // Required
		RouteTableId:           aws.String("String"), // Required
		GatewayId:              aws.String("String"),
		InstanceId:             aws.String("String"),
		IpAddress:              aws.String("String"),
		NetworkId:              aws.String("String"),
		NetworkInterfaceId:     aws.String("String"),
		NetworkName:            aws.String("String"),
		VpcPeeringConnectionId: aws.String("String"),
	}
	resp, err := svc.ReplaceRoute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ReplaceRouteTableAssociation() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.ReplaceRouteTableAssociationInput{
		AssociationId: aws.String("String"), // Required
		RouteTableId:  aws.String("String"), // Required
		Agreement:     aws.Bool(true),
	}
	resp, err := svc.ReplaceRouteTableAssociation(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RevokeSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RevokeSecurityGroupIngressInput{
		GroupName: aws.String("String"), // Required
		IpPermissionsList: [][]*string{
			{ // Required
				aws.String("CidrIp"), // Required
				// More values...
			},
			// More values...
		},
		UserId: aws.String("String"),
	}
	resp, err := svc.RevokeSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RunInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.RunInstancesInput{
		AccountingType: aws.String("String"),
		AddressingType: aws.String("String"),
		Admin:          aws.String("String"),
		Agreement:      aws.Bool(true),
		BlockDeviceMappingList: []*computing.EbsStruct{
			{ // Required
				DeleteOnTermination: aws.Bool(true),
				NoDevice:            aws.Bool(true),
				SnapshotId:          aws.String("SnapshotId"),
				VolumeSize:          aws.Int64(1),
			},
			// More values...
		},
		Description:                       aws.String("String"),
		DisableApiTermination:             aws.Bool(true),
		ImageId:                           aws.String("String"),
		InstanceId:                        aws.String("String"),
		InstanceInitiatedShutdownBehavior: aws.String("String"),
		InstanceType:                      aws.String("String"),
		IpType:                            aws.String("String"),
		KernelId:                          aws.String("String"),
		KeyName:                           aws.String("String"),
		LicenseList: []*string{
			aws.String("LicenseNum"), // Required
			// More values...
		},
		MaxCount: aws.Int64(1),
		MinCount: aws.Int64(1),
		Monitoring: &computing.MonitoringStruct{
			Enabled: aws.Bool(true),
		},
		NetworkInterfaceList: []*string{
			aws.String("IpAddress"), // Required
			// More values...
		},
		Password: aws.String("String"),
		Placement: &computing.PlacementStruct{
			AvailabilityZone: aws.String("AvailabilityZone"),
			GroupName:        aws.String("GroupName"),
		},
		PublicIp:  aws.String("String"),
		RamdiskId: aws.String("String"),
		SecurityGroupList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		SubnetId: aws.String("String"),
		UserData: &computing.UserDataStruct{
			Encoding: aws.String("Encoding"),
		},
	}
	resp, err := svc.RunInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_SetFilterForLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.SetFilterForLoadBalancerInput{
		InstancePort:     aws.Int64(1),         // Required
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
		FilterType:       aws.String("String"),
		IPAddressesList: []*bool{
			aws.Bool(true), // Required
			// More values...
		},
	}
	resp, err := svc.SetFilterForLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_StartInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.StartInstancesInput{
		InstanceIdList: []*string{ // Required
			aws.String("String"), // Required
			// More values...
		},
		AccountingTypeList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		InstanceTypeList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		NiftyIsBios: aws.Bool(true),
		TenancyList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		UserData: &computing.UserDataStruct{
			Encoding: aws.String("Encoding"),
		},
	}
	resp, err := svc.StartInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_StopInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.StopInstancesInput{
		Force: aws.Bool(true),
		InstanceIdList: []*string{
			aws.String("String"), // Required
			// More values...
		},
		TenancyList: []*string{
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.StopInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_TerminateInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.TerminateInstancesInput{
		InstanceIdList: []*string{ // Required
			aws.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.TerminateInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.UpdateLoadBalancerInput{
		LoadBalancerName:     aws.String("String"), // Required
		AccountingTypeUpdate: aws.String("String"),
		ListenerUpdate: &computing.ListenerUpdateStruct{
			InstancePort: aws.Int64(1),
			ListenerStruct: &computing.ListenerStruct{
				BalancingType:    aws.String("BalancingType"),
				InstancePort:     aws.Int64(1),
				LoadBalancerPort: aws.Int64(1),
				Protocol:         aws.String("Protocol"),
			},
			LoadBalancerPort: aws.Int64(1),
		},
		NetworkVolumeUpdate: aws.Int64(1),
	}
	resp, err := svc.UpdateLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateLoadBalancerOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.UpdateLoadBalancerOptionInput{
		InstancePort:     aws.Int64(1),         // Required
		LoadBalancerName: aws.String("String"), // Required
		LoadBalancerPort: aws.Int64(1),         // Required
		SessionStickinessPolicyUpdate: &computing.SessionStickinessPolicyUpdateStruct{
			Enable:           aws.Bool(true),
			ExpirationPeriod: aws.Int64(1),
		},
		SorryPageUpdate: &computing.SorryPageUpdateStruct{
			Enable:     aws.Bool(true),
			StatusCode: aws.Int64(1),
		},
	}
	resp, err := svc.UpdateLoadBalancerOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.UpdateSecurityGroupInput{
		GroupName:               aws.String("String"), // Required
		GgroupLogFilterNetBios:  aws.Bool(true),
		GgroupLogLimitUpdate:    aws.Int64(1),
		GroupDescriptionUpdate:  aws.String("String"),
		GroupLogFilterBroadcast: aws.Bool(true),
		GroupNameUpdate:         aws.String("String"),
		GroupRuleLimitUpdate:    aws.Int64(1),
	}
	resp, err := svc.UpdateSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateSecurityGroupOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.UpdateSecurityGroupOptionInput{
		CourseUpdate: &computing.CourseUpdateStruct{
			Agreement: aws.Bool(true),
		},
		SecurityGroupLimitUpdate: aws.Int64(1),
	}
	resp, err := svc.UpdateSecurityGroupOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UploadSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	params := &computing.UploadSslCertificateInput{
		Certificate: aws.String("String"), // Required
		Key:         aws.String("String"), // Required
		CA:          aws.String("String"),
	}
	resp, err := svc.UploadSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
