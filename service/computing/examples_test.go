// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package computing_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/tily/sdk-go/aws"
	"github.com/tily/sdk-go/aws/session"
	"github.com/tily/sdk-go/service/computing"
)

var _ time.Duration
var _ bytes.Buffer

func Examplecomputing_AllocateAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.AllocateAddressInput
	resp, err := svc.AllocateAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AssociateAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.AssociateAddressInput
	resp, err := svc.AssociateAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AssociateRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.AssociateRouteTableInput
	resp, err := svc.AssociateRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AssociateUsers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.AssociateUsersInput
	resp, err := svc.AssociateUsers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AttachVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.AttachVolumeInput
	resp, err := svc.AttachVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_AuthorizeSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.AuthorizeSecurityGroupIngressInput
	resp, err := svc.AuthorizeSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CancelCopyInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CancelCopyInstancesInput
	resp, err := svc.CancelCopyInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CancelUpload() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CancelUploadInput
	resp, err := svc.CancelUpload(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ClearLoadBalancerSession() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ClearLoadBalancerSessionInput
	resp, err := svc.ClearLoadBalancerSession(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ConfigureHealthCheck() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ConfigureHealthCheckInput
	resp, err := svc.ConfigureHealthCheck(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CopyInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CopyInstancesInput
	resp, err := svc.CopyInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateCustomerGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateCustomerGatewayInput
	resp, err := svc.CreateCustomerGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateDhcpOptions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateDhcpOptionsInput
	resp, err := svc.CreateDhcpOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateImage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateImageInput
	resp, err := svc.CreateImage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateKeyPair() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateKeyPairInput
	resp, err := svc.CreateKeyPair(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateLoadBalancerInput
	resp, err := svc.CreateLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateRoute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateRouteInput
	resp, err := svc.CreateRoute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateRouteTableInput
	resp, err := svc.CreateRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateSecurityGroupInput
	resp, err := svc.CreateSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateSslCertificateInput
	resp, err := svc.CreateSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateVolumeInput
	resp, err := svc.CreateVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateVpnConnection() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateVpnConnectionInput
	resp, err := svc.CreateVpnConnection(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_CreateVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.CreateVpnGatewayInput
	resp, err := svc.CreateVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteCustomerGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteCustomerGatewayInput
	resp, err := svc.DeleteCustomerGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteDhcpOptions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteDhcpOptionsInput
	resp, err := svc.DeleteDhcpOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteImage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteImageInput
	resp, err := svc.DeleteImage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteKeyPair() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteKeyPairInput
	resp, err := svc.DeleteKeyPair(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteLoadBalancerInput
	resp, err := svc.DeleteLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteRoute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteRouteInput
	resp, err := svc.DeleteRoute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteRouteTableInput
	resp, err := svc.DeleteRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteSecurityGroupInput
	resp, err := svc.DeleteSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteSslCertificateInput
	resp, err := svc.DeleteSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteVolumeInput
	resp, err := svc.DeleteVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteVpnConnection() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteVpnConnectionInput
	resp, err := svc.DeleteVpnConnection(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeleteVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeleteVpnGatewayInput
	resp, err := svc.DeleteVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeregisterInstancesFromLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeregisterInstancesFromLoadBalancerInput
	resp, err := svc.DeregisterInstancesFromLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DeregisterInstancesFromSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DeregisterInstancesFromSecurityGroupInput
	resp, err := svc.DeregisterInstancesFromSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeAddresses() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeAddressesInput
	resp, err := svc.DescribeAddresses(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeAssociatedUsers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeAssociatedUsersInput
	resp, err := svc.DescribeAssociatedUsers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeAvailabilityZones() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeAvailabilityZonesInput
	resp, err := svc.DescribeAvailabilityZones(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeCustomerGateways() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeCustomerGatewaysInput
	resp, err := svc.DescribeCustomerGateways(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeDhcpOptions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeDhcpOptionsInput
	resp, err := svc.DescribeDhcpOptions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeImages() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeImagesInput
	resp, err := svc.DescribeImages(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeInstanceAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeInstanceAttributeInput
	resp, err := svc.DescribeInstanceAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeInstanceHealth() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeInstanceHealthInput
	resp, err := svc.DescribeInstanceHealth(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeInstancesInput
	resp, err := svc.DescribeInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeKeyPairs() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeKeyPairsInput
	resp, err := svc.DescribeKeyPairs(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeLoadBalancers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeLoadBalancersInput
	resp, err := svc.DescribeLoadBalancers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeRegions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeRegionsInput
	resp, err := svc.DescribeRegions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeResources() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeResourcesInput
	resp, err := svc.DescribeResources(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeRouteTables() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeRouteTablesInput
	resp, err := svc.DescribeRouteTables(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSecurityActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeSecurityActivitiesInput
	resp, err := svc.DescribeSecurityActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSecurityGroupOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeSecurityGroupOptionInput
	resp, err := svc.DescribeSecurityGroupOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSecurityGroups() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeSecurityGroupsInput
	resp, err := svc.DescribeSecurityGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeServiceStatus() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeServiceStatusInput
	resp, err := svc.DescribeServiceStatus(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSslCertificateAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeSslCertificateAttributeInput
	resp, err := svc.DescribeSslCertificateAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeSslCertificates() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeSslCertificatesInput
	resp, err := svc.DescribeSslCertificates(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeUploads() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeUploadsInput
	resp, err := svc.DescribeUploads(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeUsage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeUsageInput
	resp, err := svc.DescribeUsage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeUserActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeUserActivitiesInput
	resp, err := svc.DescribeUserActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeVolumes() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeVolumesInput
	resp, err := svc.DescribeVolumes(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeVpnConnections() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeVpnConnectionsInput
	resp, err := svc.DescribeVpnConnections(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DescribeVpnGateways() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DescribeVpnGatewaysInput
	resp, err := svc.DescribeVpnGateways(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DetachVolume() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DetachVolumeInput
	resp, err := svc.DetachVolume(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DisassociateAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DisassociateAddressInput
	resp, err := svc.DisassociateAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DisassociateRouteTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DisassociateRouteTableInput
	resp, err := svc.DisassociateRouteTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DissociateUsers() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DissociateUsersInput
	resp, err := svc.DissociateUsers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_DownloadSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.DownloadSslCertificateInput
	resp, err := svc.DownloadSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ImportInstance() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ImportInstanceInput
	resp, err := svc.ImportInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ImportKeyPair() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ImportKeyPairInput
	resp, err := svc.ImportKeyPair(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifyImageAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ModifyImageAttributeInput
	resp, err := svc.ModifyImageAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifyInstanceAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ModifyInstanceAttributeInput
	resp, err := svc.ModifyInstanceAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifySslCertificateAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ModifySslCertificateAttributeInput
	resp, err := svc.ModifySslCertificateAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ModifyVolumeAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ModifyVolumeAttributeInput
	resp, err := svc.ModifyVolumeAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyAssociateImage() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyAssociateImageInput
	resp, err := svc.NiftyAssociateImage(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyAssociateNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyAssociateNatTableInput
	resp, err := svc.NiftyAssociateNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyAssociateRouteTableWithVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyAssociateRouteTableWithVpnGatewayInput
	resp, err := svc.NiftyAssociateRouteTableWithVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateAlarm() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateAlarmInput
	resp, err := svc.NiftyCreateAlarm(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateAutoScalingGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateAutoScalingGroupInput
	resp, err := svc.NiftyCreateAutoScalingGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateDhcpConfig() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateDhcpConfigInput
	resp, err := svc.NiftyCreateDhcpConfig(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateDhcpIpAddressPool() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateDhcpIpAddressPoolInput
	resp, err := svc.NiftyCreateDhcpIpAddressPool(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateDhcpStaticMapping() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateDhcpStaticMappingInput
	resp, err := svc.NiftyCreateDhcpStaticMapping(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateInstanceSnapshot() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateInstanceSnapshotInput
	resp, err := svc.NiftyCreateInstanceSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateNatRule() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateNatRuleInput
	resp, err := svc.NiftyCreateNatRule(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateNatTableInput
	resp, err := svc.NiftyCreateNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreatePrivateLan() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreatePrivateLanInput
	resp, err := svc.NiftyCreatePrivateLan(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateRouter() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateRouterInput
	resp, err := svc.NiftyCreateRouter(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyCreateWebProxy() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyCreateWebProxyInput
	resp, err := svc.NiftyCreateWebProxy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteAlarm() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteAlarmInput
	resp, err := svc.NiftyDeleteAlarm(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteAutoScalingGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteAutoScalingGroupInput
	resp, err := svc.NiftyDeleteAutoScalingGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteDhcpConfig() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteDhcpConfigInput
	resp, err := svc.NiftyDeleteDhcpConfig(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteDhcpIpAddressPool() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteDhcpIpAddressPoolInput
	resp, err := svc.NiftyDeleteDhcpIpAddressPool(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteDhcpStaticMapping() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteDhcpStaticMappingInput
	resp, err := svc.NiftyDeleteDhcpStaticMapping(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteInstanceSnapshot() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteInstanceSnapshotInput
	resp, err := svc.NiftyDeleteInstanceSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteNatRule() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteNatRuleInput
	resp, err := svc.NiftyDeleteNatRule(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteNatTableInput
	resp, err := svc.NiftyDeleteNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeletePrivateLan() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeletePrivateLanInput
	resp, err := svc.NiftyDeletePrivateLan(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteRouter() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteRouterInput
	resp, err := svc.NiftyDeleteRouter(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeleteWebProxy() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeleteWebProxyInput
	resp, err := svc.NiftyDeleteWebProxy(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeregisterRoutersFromSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeregisterRoutersFromSecurityGroupInput
	resp, err := svc.NiftyDeregisterRoutersFromSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDeregisterVpnGatewaysFromSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDeregisterVpnGatewaysFromSecurityGroupInput
	resp, err := svc.NiftyDeregisterVpnGatewaysFromSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarmHistory() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeAlarmHistoryInput
	resp, err := svc.NiftyDescribeAlarmHistory(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarmRulesActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeAlarmRulesActivitiesInput
	resp, err := svc.NiftyDescribeAlarmRulesActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarms() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeAlarmsInput
	resp, err := svc.NiftyDescribeAlarms(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAlarmsPartitions() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeAlarmsPartitionsInput
	resp, err := svc.NiftyDescribeAlarmsPartitions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeAutoScalingGroups() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeAutoScalingGroupsInput
	resp, err := svc.NiftyDescribeAutoScalingGroups(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeCorporateInfoForCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeCorporateInfoForCertificateInput
	resp, err := svc.NiftyDescribeCorporateInfoForCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeDhcpConfigs() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeDhcpConfigsInput
	resp, err := svc.NiftyDescribeDhcpConfigs(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeDhcpStatus() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeDhcpStatusInput
	resp, err := svc.NiftyDescribeDhcpStatus(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeInstanceSnapshots() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeInstanceSnapshotsInput
	resp, err := svc.NiftyDescribeInstanceSnapshots(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeNatTables() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeNatTablesInput
	resp, err := svc.NiftyDescribeNatTables(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribePerformanceChart() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribePerformanceChartInput
	resp, err := svc.NiftyDescribePerformanceChart(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribePrivateLans() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribePrivateLansInput
	resp, err := svc.NiftyDescribePrivateLans(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeRouters() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeRoutersInput
	resp, err := svc.NiftyDescribeRouters(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeScalingActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeScalingActivitiesInput
	resp, err := svc.NiftyDescribeScalingActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeVpnGatewayActivities() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeVpnGatewayActivitiesInput
	resp, err := svc.NiftyDescribeVpnGatewayActivities(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDescribeWebProxies() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDescribeWebProxiesInput
	resp, err := svc.NiftyDescribeWebProxies(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDisableDhcp() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDisableDhcpInput
	resp, err := svc.NiftyDisableDhcp(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDisassociateNatTable() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDisassociateNatTableInput
	resp, err := svc.NiftyDisassociateNatTable(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyDisassociateRouteTableFromVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyDisassociateRouteTableFromVpnGatewayInput
	resp, err := svc.NiftyDisassociateRouteTableFromVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyEnableDhcp() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyEnableDhcpInput
	resp, err := svc.NiftyEnableDhcp(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyAddressAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyAddressAttributeInput
	resp, err := svc.NiftyModifyAddressAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyCustomerGatewayAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyCustomerGatewayAttributeInput
	resp, err := svc.NiftyModifyCustomerGatewayAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyInstanceSnapshotAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyInstanceSnapshotAttributeInput
	resp, err := svc.NiftyModifyInstanceSnapshotAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyKeyPairAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyKeyPairAttributeInput
	resp, err := svc.NiftyModifyKeyPairAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyPrivateLanAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyPrivateLanAttributeInput
	resp, err := svc.NiftyModifyPrivateLanAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyRouterAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyRouterAttributeInput
	resp, err := svc.NiftyModifyRouterAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyVpnGatewayAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyVpnGatewayAttributeInput
	resp, err := svc.NiftyModifyVpnGatewayAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyModifyWebProxyAttribute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyModifyWebProxyAttributeInput
	resp, err := svc.NiftyModifyWebProxyAttribute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRebootRouters() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRebootRoutersInput
	resp, err := svc.NiftyRebootRouters(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRebootVpnGateways() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRebootVpnGatewaysInput
	resp, err := svc.NiftyRebootVpnGateways(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRegisterRoutersWithSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRegisterRoutersWithSecurityGroupInput
	resp, err := svc.NiftyRegisterRoutersWithSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRegisterVpnGatewaysWithSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRegisterVpnGatewaysWithSecurityGroupInput
	resp, err := svc.NiftyRegisterVpnGatewaysWithSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReleaseRouterBackupState() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReleaseRouterBackupStateInput
	resp, err := svc.NiftyReleaseRouterBackupState(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReleaseVpnGatewayBackupState() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReleaseVpnGatewayBackupStateInput
	resp, err := svc.NiftyReleaseVpnGatewayBackupState(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceDhcpConfig() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceDhcpConfigInput
	resp, err := svc.NiftyReplaceDhcpConfig(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceDhcpOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceDhcpOptionInput
	resp, err := svc.NiftyReplaceDhcpOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceNatRule() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceNatRuleInput
	resp, err := svc.NiftyReplaceNatRule(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceNatTableAssociation() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceNatTableAssociationInput
	resp, err := svc.NiftyReplaceNatTableAssociation(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceRouteTableAssociationWithVpnGateway() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceRouteTableAssociationWithVpnGatewayInput
	resp, err := svc.NiftyReplaceRouteTableAssociationWithVpnGateway(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceRouterLatestVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceRouterLatestVersionInput
	resp, err := svc.NiftyReplaceRouterLatestVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyReplaceVpnGatewayLatestVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyReplaceVpnGatewayLatestVersionInput
	resp, err := svc.NiftyReplaceVpnGatewayLatestVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRestoreInstanceSnapshot() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRestoreInstanceSnapshotInput
	resp, err := svc.NiftyRestoreInstanceSnapshot(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRestoreRouterPreviousVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRestoreRouterPreviousVersionInput
	resp, err := svc.NiftyRestoreRouterPreviousVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRestoreVpnGatewayPreviousVersion() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRestoreVpnGatewayPreviousVersionInput
	resp, err := svc.NiftyRestoreVpnGatewayPreviousVersion(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyRetryImportInstance() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyRetryImportInstanceInput
	resp, err := svc.NiftyRetryImportInstance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateAlarm() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyUpdateAlarmInput
	resp, err := svc.NiftyUpdateAlarm(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateAutoScalingGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyUpdateAutoScalingGroupInput
	resp, err := svc.NiftyUpdateAutoScalingGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateInstanceNetworkInterfaces() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyUpdateInstanceNetworkInterfacesInput
	resp, err := svc.NiftyUpdateInstanceNetworkInterfaces(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateRouterNetworkInterfaces() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyUpdateRouterNetworkInterfacesInput
	resp, err := svc.NiftyUpdateRouterNetworkInterfaces(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_NiftyUpdateVpnGatewayNetworkInterfaces() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.NiftyUpdateVpnGatewayNetworkInterfacesInput
	resp, err := svc.NiftyUpdateVpnGatewayNetworkInterfaces(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RebootInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RebootInstancesInput
	resp, err := svc.RebootInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterCorporateInfoForCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RegisterCorporateInfoForCertificateInput
	resp, err := svc.RegisterCorporateInfoForCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterInstancesWithLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RegisterInstancesWithLoadBalancerInput
	resp, err := svc.RegisterInstancesWithLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterInstancesWithSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RegisterInstancesWithSecurityGroupInput
	resp, err := svc.RegisterInstancesWithSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RegisterPortWithLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RegisterPortWithLoadBalancerInput
	resp, err := svc.RegisterPortWithLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ReleaseAddress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ReleaseAddressInput
	resp, err := svc.ReleaseAddress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ReplaceRoute() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ReplaceRouteInput
	resp, err := svc.ReplaceRoute(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_ReplaceRouteTableAssociation() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.ReplaceRouteTableAssociationInput
	resp, err := svc.ReplaceRouteTableAssociation(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RevokeSecurityGroupIngress() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RevokeSecurityGroupIngressInput
	resp, err := svc.RevokeSecurityGroupIngress(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_RunInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.RunInstancesInput
	resp, err := svc.RunInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_SetFilterForLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.SetFilterForLoadBalancerInput
	resp, err := svc.SetFilterForLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_StartInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.StartInstancesInput
	resp, err := svc.StartInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_StopInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.StopInstancesInput
	resp, err := svc.StopInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_TerminateInstances() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.TerminateInstancesInput
	resp, err := svc.TerminateInstances(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateLoadBalancer() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.UpdateLoadBalancerInput
	resp, err := svc.UpdateLoadBalancer(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateLoadBalancerOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.UpdateLoadBalancerOptionInput
	resp, err := svc.UpdateLoadBalancerOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateSecurityGroup() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.UpdateSecurityGroupInput
	resp, err := svc.UpdateSecurityGroup(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UpdateSecurityGroupOption() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.UpdateSecurityGroupOptionInput
	resp, err := svc.UpdateSecurityGroupOption(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func Examplecomputing_UploadSslCertificate() {
	sess := session.Must(session.NewSession())

	svc := computing.New(sess)

	var params *computing.UploadSslCertificateInput
	resp, err := svc.UploadSslCertificate(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
