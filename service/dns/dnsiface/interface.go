// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package dnsiface provides an interface to enable mocking the dns service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package dnsiface

import (
	"github.com/tily/sdk-go/aws/request"
	"github.com/tily/sdk-go/service/dns"
)

// dnsAPI provides an interface to enable mocking the
// dns.dns service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // dns.
//    func myFunc(svc dnsiface.dnsAPI) bool {
//        // Make svc.ChangeResourceRecordSets request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := dns.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockdnsClient struct {
//        dnsiface.dnsAPI
//    }
//    func (m *mockdnsClient) ChangeResourceRecordSets(input *dns.ChangeResourceRecordSetsInput) (*dns.ChangeResourceRecordSetsOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockdnsClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type dnsAPI interface {
	ChangeResourceRecordSetsRequest(*dns.ChangeResourceRecordSetsInput) (*request.Request, *dns.ChangeResourceRecordSetsOutput)

	ChangeResourceRecordSets(*dns.ChangeResourceRecordSetsInput) (*dns.ChangeResourceRecordSetsOutput, error)

	CreateHostedZoneRequest(*dns.CreateHostedZoneInput) (*request.Request, *dns.CreateHostedZoneOutput)

	CreateHostedZone(*dns.CreateHostedZoneInput) (*dns.CreateHostedZoneOutput, error)

	DeleteHostedZoneRequest(*dns.DeleteHostedZoneInput) (*request.Request, *dns.DeleteHostedZoneOutput)

	DeleteHostedZone(*dns.DeleteHostedZoneInput) (*dns.DeleteHostedZoneOutput, error)

	GetChangeRequest(*dns.GetChangeInput) (*request.Request, *dns.GetChangeOutput)

	GetChange(*dns.GetChangeInput) (*dns.GetChangeOutput, error)

	GetHostedZoneRequest(*dns.GetHostedZoneInput) (*request.Request, *dns.GetHostedZoneOutput)

	GetHostedZone(*dns.GetHostedZoneInput) (*dns.GetHostedZoneOutput, error)

	ListHostedZonesRequest(*dns.ListHostedZonesInput) (*request.Request, *dns.ListHostedZonesOutput)

	ListHostedZones(*dns.ListHostedZonesInput) (*dns.ListHostedZonesOutput, error)

	ListResourceRecordSetsRequest(*dns.ListResourceRecordSetsInput) (*request.Request, *dns.ListResourceRecordSetsOutput)

	ListResourceRecordSets(*dns.ListResourceRecordSetsInput) (*dns.ListResourceRecordSetsOutput, error)
}

var _ dnsAPI = (*dns.dns)(nil)
